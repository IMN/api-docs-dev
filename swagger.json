{
  "swagger": "2.0",
  "info": {
    "title": "IMN  API- DEV",
    "description": "\r\n# The REST API of IMN system\r\n## Overview\r\nThe REST APIs provide programmatic access to read and write IMN data. \r\nBasically, with this API you will be able to do everything like you were with your browser on https://go.imn.io !\r\n\r\nThe main features are:\r\n- Register and manage your merchant account\r\n- Declare your source marketplace to get your offers\r\n- Configure your marketplace api credential\r\n- Define the target marketplaces you want to go to, then you will be able to configure:\r\n\t- the pricing setting \r\n\t- the shipping settings\r\n- ...and more!\r\n\r\n\r\n## Things to keep in mind\r\n### API Rate Limits\r\n- The IMN REST API is limited to 100 calls/minute.\r\n\r\n### Media type\r\nThe default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.\r\n\r\n### Required content type\r\nThe required and default encoding for the request and responses is UTF8.\r\n\r\n### Required date time format\r\nAll our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.\r\n\r\n### Base URL\r\nThe Base URL of the IMN API Order Management REST API conforms to the following template.\r\n\r\nhttps://api.imn.io\r\n\r\nAll URLs returned by the IMN API are relative to this base URL, and all requests to the REST API must use this base URL template.\r\n\r\nYou can test our API on https://api-docs.imn.io/swagger-ui\\\\\r\nYou can contact us on [gitter, #IMN/API](https://gitter.im/IMN/API)\r\n\r\n",
    "version": "1.0",
    "x-logo": {
      "url": "https://imngo.blob.core.windows.net/imngo/images/imn-logo.png",
      "backgroundColor": "#FFFFFF"
    },
    "contact": {
      "email": "support@imn.io"
    },
    "license": {
      "name": "IMN",
      "url": "https://go.imn.io"
    }
  },
  "host": "api.imn.io",
  "x-IMN-api-ops": {
    "codeGenType": "webapi",
    "repo": "IMN",
    "product": "IMN-CORE",
    "appRoot": "IMN.MER.BAM.WebService",
    "apiName": "MerchantOperationsV1",
    "namespace": "IMN.MER.BAM.WebService",
    "applicationShortName": "MER.BAM.WS",
    "useBeezUPFrameworkVersion2": true,
    "comment": "No change. Just server side generation.\n",
    "using": [
      "IMN.Schemas",
      "IMN.Exceptions"
    ],
    "references": [
      "IMN.Schemas",
      "IMN.Exceptions"
    ]
  },
  "x-basePath": "/merchant/operations/v1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Merchant API - Operations - Global",
      "x-displayName": "Global"
    },
    {
      "name": "Merchant API - Marketplaces - Global",
      "x-displayName": "Global"
    },
    {
      "name": "Merchant API - Marketplaces - Marketplace",
      "x-displayName": "Marketplace"
    },
    {
      "name": "Merchant API - Marketplaces - Api Credentials",
      "x-displayName": "Api Credentials"
    },
    {
      "name": "Merchant API - Marketplaces - Source Marketplace Activation",
      "x-displayName": "Source Marketplace Activation"
    },
    {
      "name": "Merchant API - Marketplaces - Shipping Settings",
      "x-displayName": "Shipping Settings"
    },
    {
      "name": "Merchant API - Marketplaces - Pricing Settings",
      "x-displayName": "Pricing Settings"
    },
    {
      "name": "Merchant API - Marketplaces - Target Marketplace Activation",
      "x-displayName": "Target Marketplace Activation"
    },
    {
      "name": "Merchant - Account API - Global",
      "x-displayName": "Global"
    },
    {
      "name": "Merchant - Account API - Account",
      "x-displayName": "Account"
    },
    {
      "name": "Merchant - Account API - Api Token",
      "x-displayName": "Api Token"
    },
    {
      "name": "Merchant - Orders - Global",
      "description": "All global operations (cross marketplace)",
      "x-displayName": "Global"
    },
    {
      "name": "Merchant - Orders - List",
      "description": "All Order list operations",
      "x-displayName": "List"
    },
    {
      "name": "Merchant - Orders - Order",
      "description": "All operations related to a single Order",
      "x-displayName": "Order"
    },
    {
      "name": "Merchant - Orders - Batches",
      "description": "All batch operations on Orders to reduce call rate",
      "x-displayName": "Batches"
    },
    {
      "name": "Merchant - Orders - Subscriptions - DRAFT",
      "description": "All orders subscription operations - DRAFT",
      "x-displayName": "Subscriptions - DRAFT"
    },
    {
      "name": "Merchant - Orders - Statistics",
      "description": "The statistics of your orders",
      "x-displayName": "Statistics"
    },
    {
      "name": "Merchant API - Offers - Global",
      "x-displayName": "Global"
    },
    {
      "name": "Merchant API - List of Values - LOV",
      "description": "All LOV operations",
      "x-displayName": "LOV"
    },
    {
      "name": "External API - Merchant Marketplace Subscription Request - Global",
      "x-displayName": "Global"
    }
  ],
  "paths": {
    "/merchant/operations/v1/{merchantCode}/{operationId}": {
      "get": {
        "tags": [
          "Merchant API - Operations - Global"
        ],
        "summary": "Get the operation status",
        "operationId": "GetOperationStatus",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "CorrelationId"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation status",
            "schema": {
              "$ref": "#/definitions/operationStatusIndex"
            }
          },
          "303": {
            "description": "The operation is completed so the resource is up to date now! \nFor more information, please read this: https://www.adayinthelifeof.nl/2011/06/02/asynchronous-operations-in-rest/\n",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to the resource"
              }
            }
          },
          "404": {
            "description": "The operation status not found",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}": {
      "get": {
        "tags": [
          "Merchant API - Marketplaces - Global"
        ],
        "summary": "Get the marketplaces index",
        "operationId": "GetMarketplacesIndex",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The marketplaces index",
            "schema": {
              "$ref": "#/definitions/marketplacesIndex"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}": {
      "get": {
        "tags": [
          "Merchant API - Marketplaces - Marketplace"
        ],
        "summary": "Get the marketplace index",
        "operationId": "GetMarketplaceIndex",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The marketplace index",
            "schema": {
              "$ref": "#/definitions/marketplaceIndex"
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/subscription/reporting": {
      "get": {
        "tags": [
          "Merchant API - Marketplaces - Marketplace"
        ],
        "summary": "Get the marketplace subscription reporting",
        "operationId": "GetMarketplaceSubscriptionReporting",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The marketplace subscription reporting",
            "schema": {
              "$ref": "#/definitions/marketplaceSubscriptionReporting"
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/apiCredential": {
      "get": {
        "tags": [
          "Merchant API - Marketplaces - Api Credentials"
        ],
        "summary": "Get the marketplace API credential",
        "operationId": "GetMarketplaceApiCredential",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The marketplace API credential",
            "schema": {
              "$ref": "#/definitions/marketplaceApiCredential"
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      },
      "put": {
        "tags": [
          "Merchant API - Marketplaces - Api Credentials"
        ],
        "summary": "Save the marketplace API credential",
        "operationId": "SaveMarketplaceApiCredential",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "name": "credential",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/marketplaceApiCredential"
            },
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Marketplace API credentials saved",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "403": {
            "$ref": "#/responses/invalidMarketplaceCredential"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/shippingSettings": {
      "get": {
        "tags": [
          "Merchant API - Marketplaces - Shipping Settings"
        ],
        "summary": "Get the shipping settings for this marketplace",
        "operationId": "GetMarketplaceShippingSettings",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The shipping settings for this marketplace",
            "schema": {
              "$ref": "#/definitions/marketplaceShippingSettings"
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      },
      "put": {
        "tags": [
          "Merchant API - Marketplaces - Shipping Settings"
        ],
        "summary": "Save the shipping settings for this marketplace",
        "operationId": "SaveMarketplaceShippingSettings",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "name": "shippingSetting",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/marketplaceShippingSettings"
            },
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Shipping settings configured for this marketplace",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/pricingSetting": {
      "get": {
        "tags": [
          "Merchant API - Marketplaces - Pricing Settings"
        ],
        "summary": "Get the pricing setting for this marketplace",
        "operationId": "GetMarketplacePricingSetting",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The pricing settings for this marketplace",
            "schema": {
              "$ref": "#/definitions/marketplacePricingSetting"
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      },
      "put": {
        "tags": [
          "Merchant API - Marketplaces - Pricing Settings"
        ],
        "summary": "Save the pricing setting for this marketplace",
        "operationId": "SaveMarketplacePricingSetting",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "name": "pricingSetting",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/marketplacePricingSetting"
            },
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Pricing setting configured for this marketplace",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "404": {
            "$ref": "#/responses/merchantNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/declareOffersSource": {
      "post": {
        "tags": [
          "Merchant API - Marketplaces - Source Marketplace Activation"
        ],
        "summary": "Declare this marketplace as source of the offers",
        "operationId": "DeclareOffersSourceMarketplace",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The offers source marketplace has been declared",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/undeclareOffersSource": {
      "post": {
        "tags": [
          "Merchant API - Marketplaces - Source Marketplace Activation"
        ],
        "summary": "Undeclare this marketplace as source of the offers",
        "operationId": "UndeclareOffersSourceMarketplace",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The offers source marketplace has been undeclared",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "412": {
            "$ref": "#/responses/notOfferSourceMarketplace"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/disableOfferImportation": {
      "post": {
        "tags": [
          "Merchant API - Marketplaces - Source Marketplace Activation"
        ],
        "summary": "Disable offer importation for this marketplace",
        "operationId": "DisableOfferImportation",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The marketplace offer importation has been disabled",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/reenableOfferImportation": {
      "post": {
        "tags": [
          "Merchant API - Marketplaces - Source Marketplace Activation"
        ],
        "summary": "Reenable offer importation for this marketplace",
        "operationId": "ReenableOfferImportation",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The marketplace offer importation has been reenabled",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "403": {
            "$ref": "#/responses/subscriptionNotAccepted"
          },
          "412": {
            "$ref": "#/responses/credentialNotConfigured"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/enable": {
      "post": {
        "tags": [
          "Merchant API - Marketplaces - Target Marketplace Activation"
        ],
        "summary": "Enable offers publication & order management for this marketplace",
        "operationId": "EnableMarketplace",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The marketplace has been enabled",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "403": {
            "$ref": "#/responses/subscriptionNotAccepted"
          },
          "412": {
            "$ref": "#/responses/credentialNotConfigured"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/disable": {
      "post": {
        "tags": [
          "Merchant API - Marketplaces - Target Marketplace Activation"
        ],
        "summary": "Disable offers publication & order management for this marketplace",
        "operationId": "DisableMarketplace",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The marketplace has been disabled",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/disableOrderImportation": {
      "post": {
        "tags": [
          "Merchant API - Marketplaces - Target Marketplace Activation"
        ],
        "summary": "Disable order importation for this marketplace",
        "operationId": "DisableOrderImportation",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The marketplace order importation has been disabled",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/reenableOrderImportation": {
      "post": {
        "tags": [
          "Merchant API - Marketplaces - Target Marketplace Activation"
        ],
        "summary": "Reenable order importation for this marketplace",
        "operationId": "ReenableOrderImportation",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The marketplace order importation has been reenabled",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "404": {
            "$ref": "#/responses/merchantOrMarketplaceNotFound"
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "403": {
            "$ref": "#/responses/subscriptionNotAccepted"
          },
          "412": {
            "$ref": "#/responses/credentialNotConfigured"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/account/v1/": {
      "get": {
        "tags": [
          "Merchant - Account API - Global"
        ],
        "summary": "Get the merchant account index",
        "operationId": "GetMerchantAccountIndex",
        "responses": {
          "200": {
            "description": "The merchant account index",
            "schema": {
              "$ref": "#/definitions/merchantAccountIndex"
            }
          },
          "401": {
            "description": "The merchant informations are not available",
            "schema": {
              "$ref": "#/definitions/userErrorMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/account/v1/checkMerchantCodeAvailability": {
      "post": {
        "tags": [
          "Merchant - Account API - Global"
        ],
        "summary": "Check if merchant code is available",
        "operationId": "CheckMerchantCodeAvailability",
        "parameters": [
          {
            "name": "merchantCode",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/merchantCode"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The merchant code is available"
          },
          "409": {
            "description": "The merchant code is not available",
            "schema": {
              "$ref": "#/definitions/userErrorMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/account/v1/create": {
      "post": {
        "tags": [
          "Merchant - Account API - Global"
        ],
        "summary": "Create the merchant account using the merchant code",
        "operationId": "CreateMerchantAccount",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createMerchantAccountRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The merchant code has been created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "400": {
            "description": "The merchant code or some values are invalid. Please check the error message.",
            "schema": {
              "$ref": "#/definitions/userErrorMessage"
            }
          },
          "409": {
            "$ref": "#/responses/merchantCodeAlreadyUsed"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/account/v1/{merchantCode}": {
      "get": {
        "tags": [
          "Merchant - Account API - Account"
        ],
        "summary": "Get merchant account info",
        "operationId": "GetMerchantAccountInfo",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The merchant account info",
            "schema": {
              "$ref": "#/definitions/merchantAccountInfo"
            }
          },
          "404": {
            "$ref": "#/responses/merchantNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      },
      "patch": {
        "tags": [
          "Merchant - Account API - Account"
        ],
        "summary": "Save merchant account info",
        "operationId": "UpdateMerchantAccountInfo",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "description": "The merchant account info update request",
            "schema": {
              "$ref": "#/definitions/updateMerchantAccountRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Merchant account info updated",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "400": {
            "$ref": "#/responses/invalidMerchantCode"
          },
          "404": {
            "$ref": "#/responses/merchantNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/account/v1/{merchantCode}/apiToken": {
      "get": {
        "tags": [
          "Merchant - Account API - Api Token"
        ],
        "summary": "Get merchant api token",
        "operationId": "GetMerchantApiToken",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The merchant api token",
            "schema": {
              "$ref": "#/definitions/apiToken"
            }
          },
          "404": {
            "$ref": "#/responses/merchantNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/account/v1/{merchantCode}/apiToken/reset": {
      "post": {
        "tags": [
          "Merchant - Account API - Api Token"
        ],
        "summary": "Reset merchant api token",
        "operationId": "ResetMerchantApiToken",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Merchant api token reset"
          },
          "404": {
            "$ref": "#/responses/merchantNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/orders/v1/{merchantCode}": {
      "get": {
        "tags": [
          "Merchant - Orders - Global"
        ],
        "x-tagGroups": "Marketplaces Orders",
        "operationId": "GetOrderApiIndex",
        "summary": "Get all actions you can do on the order API",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Order API index",
            "schema": {
              "$ref": "#/definitions/orderApiIndex"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/list/full": {
      "post": {
        "tags": [
          "Merchant - Orders - List"
        ],
        "operationId": "GetOrderListFull",
        "summary": "Get a paginated list of all orders with all order and order item(s) properties",
        "description": "The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties.\n",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "Accept-Encoding",
            "description": "Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/orderListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the full list of Orders",
            "schema": {
              "$ref": "#/definitions/orderListFull"
            }
          },
          "400": {
            "description": "Could not process request for given parameters values. Please check error message for more details.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/list/light": {
      "post": {
        "tags": [
          "Merchant - Orders - List"
        ],
        "operationId": "GetOrderListLight",
        "summary": "Get a paginated list of orders without order items",
        "description": "The purpose of this operation is to reduce the amount of data returned by the API by returning a partial (light) version of the orders.\n",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/orderListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the full list of Orders",
            "schema": {
              "$ref": "#/definitions/orderListLight"
            }
          },
          "400": {
            "description": "Could not process request for given parameters values. Please check error message for more details.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/batches/setMerchantOrderInfos": {
      "post": {
        "tags": [
          "Merchant - Orders - Batches"
        ],
        "operationId": "SetMerchantOrderInfoList",
        "summary": "Send a batch of operations to set an Order's merchant information  (max 100 items per call)",
        "description": "The purpose of this operation is to reduce the amount of request to the API.",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setMerchantOrderInfoListRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/orderMerchantInfoBatchOperationResponse"
          },
          "400": {
            "$ref": "#/responses/orderBatchBadRequest"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/batches/clearMerchantOrderInfos": {
      "post": {
        "tags": [
          "Merchant - Orders - Batches"
        ],
        "operationId": "ClearMerchantOrderInfoList",
        "summary": "Send a batch of operations to clear an Order's merchant information (max 100 items per call)",
        "description": "The purpose of this operation is to reduce the amount of request to the API.",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/clearMerchantOrderInfoListRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/orderMerchantInfoBatchOperationResponse"
          },
          "400": {
            "$ref": "#/responses/orderBatchBadRequest"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/batches/ship": {
      "post": {
        "tags": [
          "Merchant - Orders - Batches"
        ],
        "operationId": "ShipOrderList",
        "summary": "Ship multiple marketplace orders in one operation (max 100 items per call)",
        "description": "The purpose of this operation is to reduce the amount of request to the API.",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/shipOrderListRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/orderChangeBatchOperationResponse"
          },
          "400": {
            "$ref": "#/responses/orderBatchBadRequest"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/batches/shipWithTrackingUrl": {
      "post": {
        "tags": [
          "Merchant - Orders - Batches"
        ],
        "operationId": "ShipOrderListWithTrackUrl",
        "summary": "Ship multiple marketplace orders with tracking url in one operation (max 100 items per call)",
        "description": "The purpose of this operation is to reduce the amount of request to the API.",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/shipOrderWithTrackingUrlListRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/orderChangeBatchOperationResponse"
          },
          "400": {
            "$ref": "#/responses/orderBatchBadRequest"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/batches/refund": {
      "post": {
        "tags": [
          "Merchant - Orders - Batches"
        ],
        "operationId": "RefundOrderList",
        "summary": "Refund multiple marketplace orders in one operation (max 100 items per call)",
        "description": "The purpose of this operation is to reduce the amount of request to the API.",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/refundOrderListRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/orderChangeBatchOperationResponse"
          },
          "400": {
            "$ref": "#/responses/orderBatchBadRequest"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/batches/accept": {
      "post": {
        "tags": [
          "Merchant - Orders - Batches"
        ],
        "operationId": "AcceptOrderList",
        "summary": "Accept multiple marketplace orders in one operation (max 100 items per call)",
        "description": "The purpose of this operation is to reduce the amount of request to the API.",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/acceptOrderListRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/orderChangeBatchOperationResponse"
          },
          "400": {
            "$ref": "#/responses/orderBatchBadRequest"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/batches/refuse": {
      "post": {
        "tags": [
          "Merchant - Orders - Batches"
        ],
        "operationId": "RefuseOrderList",
        "summary": "Refuse multiple marketplace orders in one operation (max 100 items per call)",
        "description": "The purpose of this operation is to reduce the amount of request to the API.",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/refuseOrderListRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/orderChangeBatchOperationResponse"
          },
          "400": {
            "$ref": "#/responses/orderBatchBadRequest"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/batches/cancel": {
      "post": {
        "tags": [
          "Merchant - Orders - Batches"
        ],
        "operationId": "CancelOrderList",
        "summary": "Cancel multiple marketplace orders in one operation (max 100 items per call)",
        "description": "The purpose of this operation is to reduce the amount of request to the API.",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cancelOrderListRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/orderChangeBatchOperationResponse"
          },
          "400": {
            "$ref": "#/responses/orderBatchBadRequest"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}": {
      "head": {
        "tags": [
          "Merchant - Orders - Order"
        ],
        "operationId": "HeadOrder",
        "summary": "Get the meta information about the order (ETag, Last-Modified)",
        "description": "This operation use our redis cache to give you the most performant response.\nThe purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body.\n",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched Order and Order Item(s) properties",
            "headers": {
              "Last-Modified": {
                "type": "string",
                "format": "date-time",
                "description": "Last modification UTC date of the order\\\nFor more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2\n"
              },
              "ETag": {
                "type": "string",
                "description": "ETag value to identify the current version of requested Order\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
              }
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "404": {
            "$ref": "#/responses/orderNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Merchant - Orders - Order"
        ],
        "operationId": "GetOrder",
        "summary": "Get full Order and Order Item(s) properties",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched Order and Order Item(s) properties",
            "headers": {
              "Last-Modified": {
                "type": "string",
                "format": "date-time",
                "description": "Last modification UTC date of the order\\\nFor more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2\n"
              },
              "ETag": {
                "type": "string",
                "description": "ETag value to identify the current version of requested Order\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
              }
            },
            "schema": {
              "$ref": "#/definitions/orderIndex"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "404": {
            "$ref": "#/responses/orderNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/history": {
      "get": {
        "tags": [
          "Merchant - Orders - Order"
        ],
        "operationId": "GetOrderHistory",
        "summary": "Get order change history",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched Order history",
            "schema": {
              "$ref": "#/definitions/orderHistory"
            }
          },
          "304": {
            "$ref": "#/responses/304_NotModified"
          },
          "404": {
            "$ref": "#/responses/orderNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/setMerchantOrderInfo": {
      "post": {
        "tags": [
          "Merchant - Orders - Order"
        ],
        "operationId": "SetMerchantOrderInfo",
        "summary": "Set an Order's merchant information",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setMerchantOrderInfoRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully set Order merchant order info set",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "400": {
            "description": "Could not update Order merchant information. Please see body for more information.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "404": {
            "$ref": "#/responses/orderNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/clearMerchantOrderInfo": {
      "post": {
        "tags": [
          "Merchant - Orders - Order"
        ],
        "operationId": "ClearMerchantOrderInfo",
        "summary": "Clear an Order's merchant information",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully cleared Order merchant order info set",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "400": {
            "description": "Could not update Order merchant information. Please see body for more information.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "404": {
            "$ref": "#/responses/orderNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/accept": {
      "post": {
        "tags": [
          "Merchant - Orders - Order"
        ],
        "operationId": "AcceptOrder",
        "summary": "Accept your marketplace order",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "$ref": "#/parameters/ifMatchParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Order accept request accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "400": {
            "description": "Invalid order accept request, could not be send to the marketplace. Please check your request.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "404": {
            "$ref": "#/responses/orderNotFound"
          },
          "409": {
            "$ref": "#/responses/orderChangeAlreadyInProgress"
          },
          "412": {
            "$ref": "#/responses/412_PreConditionFailed"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/refuse": {
      "post": {
        "tags": [
          "Merchant - Orders - Order"
        ],
        "operationId": "RefuseOrder",
        "summary": "Refuse your marketplace order",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "$ref": "#/parameters/ifMatchParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Order refuse request accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "400": {
            "description": "Invalid order refuse request, could not be send to the marketplace. Please check your request.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "404": {
            "$ref": "#/responses/orderNotFound"
          },
          "409": {
            "$ref": "#/responses/orderChangeAlreadyInProgress"
          },
          "412": {
            "$ref": "#/responses/412_PreConditionFailed"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/cancel": {
      "post": {
        "tags": [
          "Merchant - Orders - Order"
        ],
        "operationId": "CancelOrder",
        "summary": "Cancel your marketplace order",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "$ref": "#/parameters/ifMatchParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cancelOrderRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Order cancel request accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "400": {
            "description": "Invalid order cancel request, could not be send to the marketplace. Please check your request.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "404": {
            "$ref": "#/responses/orderNotFound"
          },
          "409": {
            "$ref": "#/responses/orderChangeAlreadyInProgress"
          },
          "412": {
            "$ref": "#/responses/412_PreConditionFailed"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/ship": {
      "post": {
        "tags": [
          "Merchant - Orders - Order"
        ],
        "operationId": "ShipOrder",
        "summary": "Ship your marketplace order",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/shipOrderRequest"
            }
          },
          {
            "$ref": "#/parameters/ifMatchParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Order ship request accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "400": {
            "description": "Invalid order ship request, could not be send to the marketplace. Please check the body of this request.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "404": {
            "$ref": "#/responses/orderNotFound"
          },
          "409": {
            "$ref": "#/responses/orderChangeAlreadyInProgress"
          },
          "412": {
            "$ref": "#/responses/412_PreConditionFailed"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/shipWithTrackingUrl": {
      "post": {
        "tags": [
          "Merchant - Orders - Order"
        ],
        "operationId": "ShipOrderWithTrackingUrl",
        "summary": "Ship your marketplace order with tracking url",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/shipOrderWithTrackingUrlRequest"
            }
          },
          {
            "$ref": "#/parameters/ifMatchParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Order ship with tracking url request accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "400": {
            "description": "Invalid order ship request, could not be send to the marketplace. Please check the body of this request.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "404": {
            "$ref": "#/responses/orderNotFound"
          },
          "409": {
            "$ref": "#/responses/orderChangeAlreadyInProgress"
          },
          "412": {
            "$ref": "#/responses/412_PreConditionFailed"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/refund": {
      "post": {
        "tags": [
          "Merchant - Orders - Order"
        ],
        "operationId": "RefundOrder",
        "summary": "Refund your marketplace order",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/userNameInQueryParameter"
          },
          {
            "$ref": "#/parameters/testModeInQueryParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/refundOrderRequest"
            }
          },
          {
            "$ref": "#/parameters/ifMatchParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Order refund request accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "400": {
            "description": "Invalid order refund request, could not be send to the marketplace. Please check the body of this request.",
            "x-exceptions": [
              "ValidationException"
            ],
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "404": {
            "$ref": "#/responses/orderNotFound"
          },
          "409": {
            "$ref": "#/responses/orderChangeAlreadyInProgress"
          },
          "412": {
            "$ref": "#/responses/412_PreConditionFailed"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/changes/{correlationId}/abort": {
      "post": {
        "tags": [
          "Merchant - Orders - Order"
        ],
        "operationId": "AbortOrderChange",
        "summary": "Declare the abortion of the order change request.",
        "description": "This operation will not cancel the marketplace order change but will unlock the order to allow order change.",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceCodeParameter"
          },
          {
            "$ref": "#/parameters/marketplaceOrderIdParameter"
          },
          {
            "$ref": "#/parameters/correlationIdParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The merchant order change abortion has been processed",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location to monitor the progression of the operation in the IMN system"
              }
            }
          },
          "400": {
            "description": "Something wrong in the request, please check the documentation.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "404": {
            "$ref": "#/responses/orderChangeNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/orders/v1/{merchantCode}/subscriptions": {
      "post": {
        "tags": [
          "Merchant - Orders - Subscriptions - DRAFT"
        ],
        "operationId": "CreateSubscription",
        "summary": "Creates a subscription to the orders",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createSubscriptionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription created",
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          },
          "400": {
            "description": "Invalid subscription request.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "409": {
            "description": "There is already a subscription on for the same eventType and the same target Url.\n",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Merchant - Orders - Subscriptions - DRAFT"
        ],
        "operationId": "GetSubscriptionList",
        "summary": "Get the subscription list",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The suscription list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/subscription"
              }
            }
          },
          "400": {
            "description": "Invalid subscription request.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "409": {
            "description": "There is already a subscription on for the same eventType and the same target Url.\n",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/subscriptions/{id}": {
      "get": {
        "tags": [
          "Merchant - Orders - Subscriptions - DRAFT"
        ],
        "operationId": "GetSubscription",
        "summary": "Get a subscription to the orders",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Hook-Secret",
            "in": "header",
            "required": true,
            "type": "string",
            "x-example": "blablabla"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription info",
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          },
          "404": {
            "description": "Invalid subscription id or X-Hook-Secret.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Merchant - Orders - Subscriptions - DRAFT"
        ],
        "operationId": "DeleteSubscription",
        "summary": "Delete a subscription to the orders",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Hook-Secret",
            "in": "header",
            "required": true,
            "type": "string",
            "x-example": "blablabla"
          }
        ],
        "responses": {
          "204": {
            "description": "Subscription deleted"
          },
          "404": {
            "description": "Invalid subscription id or X-Hook-Secret.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/subscriptions/{id}/activate": {
      "post": {
        "tags": [
          "Merchant - Orders - Subscriptions - DRAFT"
        ],
        "operationId": "ActivateSubscription",
        "summary": "Activate a subscription to the orders",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Hook-Secret",
            "in": "header",
            "required": true,
            "type": "string",
            "x-example": "blablabla"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription activated",
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          },
          "404": {
            "description": "Invalid subscription id or X-Hook-Secret.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          }
        }
      }
    },
    "/merchant/orders/v1/{merchantCode}/subscriptions/{id}/deactivate": {
      "post": {
        "tags": [
          "Merchant - Orders - Subscriptions - DRAFT"
        ],
        "operationId": "DeactivateSubscription",
        "summary": "Deactivate a subscription to the orders",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-Hook-Secret",
            "in": "header",
            "required": true,
            "type": "string",
            "x-example": "blablabla"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription deactivated",
            "schema": {
              "$ref": "#/definitions/subscription"
            }
          },
          "404": {
            "description": "Invalid subscription id or X-Hook-Secret.",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        },
        "deprecated": false
      }
    },
    "/merchant/orders/v1/{merchantCode}/reports/status": {
      "get": {
        "tags": [
          "Merchant - Orders - Statistics"
        ],
        "summary": "Get the report status",
        "description": "Get the report status",
        "operationId": "GetMerchantReportStatus",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Your reporting status",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/reportStatusByMarketplace"
              }
            }
          },
          "400": {
            "$ref": "#/responses/GeneralError"
          },
          "404": {
            "$ref": "#/responses/merchantNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/orders/v1/{merchantCode}/reports/byday": {
      "post": {
        "tags": [
          "Merchant - Orders - Statistics"
        ],
        "summary": "Get the report by day",
        "description": "Get the report by day",
        "operationId": "GetMerchantReportByDay",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/reportByDayRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Your reporting by day",
            "schema": {
              "$ref": "#/definitions/reportByDayResponse"
            }
          },
          "400": {
            "$ref": "#/responses/GeneralError"
          },
          "404": {
            "$ref": "#/responses/merchantNotFound"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/offers/v1/{merchantCode}": {
      "post": {
        "tags": [
          "Merchant API - Offers - Global"
        ],
        "summary": "Save a batch of merchant offers",
        "operationId": "SaveMerchantOfferBatch",
        "parameters": [
          {
            "$ref": "#/parameters/merchantCodeParameter"
          },
          {
            "name": "request",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/batchMerchantOfferChanges"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The merchant offers changes have been saved!"
          },
          "400": {
            "$ref": "#/responses/offerBatchBadRequest"
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/lov/v1/": {
      "get": {
        "summary": "Get all list names",
        "operationId": "GetUserLovIndex",
        "tags": [
          "Merchant API - List of Values - LOV"
        ],
        "responses": {
          "200": {
            "description": "Get the list names",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/userLovIndex"
            }
          },
          "304": {
            "description": "The ETag sent in the http header If-None-Match did not change. So you can keep your version.",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/merchant/lov/v1/{listName}": {
      "get": {
        "tags": [
          "Merchant API - List of Values - LOV"
        ],
        "summary": "Get the list of values related to this list name",
        "operationId": "GetUserListOfValues",
        "parameters": [
          {
            "name": "listName",
            "in": "path",
            "required": true,
            "description": "The list of value name your want to get",
            "type": "string"
          },
          {
            "$ref": "#/parameters/acceptLanguageParameter"
          },
          {
            "$ref": "#/parameters/ifNoneMatchParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of values",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              },
              "Content-Language": {
                "description": "Indicates the language use in the response",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/userListOfValuesResponse"
            }
          },
          "304": {
            "description": "The ETag sent in the http header If-None-Match did not change. So you can keep your version.",
            "headers": {
              "ETag": {
                "description": "The ETag corresponding to the LOV Index",
                "type": "string"
              },
              "Cache-Control": {
                "description": "Indicates the directive around the caching mechanisms.\\\nFor more information, please go to this link: https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n",
                "type": "array",
                "collectionFormat": "csv",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "schema": {
              "$ref": "#/definitions/errorResponseMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    },
    "/external/merchants/v1/subscriptionsRequested": {
      "post": {
        "tags": [
          "External API - Merchant Marketplace Subscription Request - Global"
        ],
        "summary": "Notify merchant subscriptions request",
        "operationId": "PushMerchantSubscriptionsRequested",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/externalMerchantMarketplaceSubscriptions"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Subscriptions's request have been integrated"
          },
          "400": {
            "description": "The subscription request utc date is in future",
            "schema": {
              "$ref": "#/definitions/userErrorMessage"
            }
          },
          "default": {
            "$ref": "#/responses/GeneralError"
          }
        }
      }
    }
  },
  "definitions": {
    "operationStatusIndex": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/operationStatusInfo"
          }
        },
        "apiGetDependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiGetDependenciesInfo"
          }
        },
        "projections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/operationProjectionStatusInfo"
          }
        }
      }
    },
    "operationStatusInfo": {
      "type": "object",
      "required": [
        "tenantApp",
        "name",
        "started"
      ],
      "properties": {
        "tenantApp": {
          "$ref": "#/definitions/tenantApp"
        },
        "name": {
          "type": "string"
        },
        "started": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiGetDependenciesInfo": {
      "type": "object",
      "required": [
        "uri",
        "tenantApps"
      ],
      "properties": {
        "uri": {
          "type": "string"
        },
        "tenantApps": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/tenantApp"
          }
        }
      }
    },
    "tenantApp": {
      "type": "object",
      "required": [
        "tenant",
        "app"
      ],
      "properties": {
        "tenant": {
          "type": "string"
        },
        "app": {
          "type": "string"
        }
      }
    },
    "operationProjectionStatusInfo": {
      "type": "object",
      "required": [
        "tenantApp",
        "lastUpdateUtcDate"
      ],
      "properties": {
        "tenantApp": {
          "$ref": "#/definitions/tenantApp"
        },
        "lastUpdateUtcDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastMessageId": {
          "type": "string"
        },
        "lastMessageName": {
          "type": "string"
        },
        "transactionInfo": {
          "$ref": "#/definitions/operationTransactionInfo"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "operationTransactionInfo": {
      "type": "object",
      "required": [
        "id",
        "messageNumber",
        "messageCount"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "messageNumber": {
          "type": "integer"
        },
        "messageCount": {
          "type": "integer"
        }
      }
    },
    "links.GetMarketplaceApiCredentialLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/marketplaces/v1/MLT01/E1/credential",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetMarketplaceShippingSettingsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/marketplaces/v1/MLT01/E1/shippingSettings",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetMarketplacePricingSettingLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/marketplaces/v1/MLT01/E1/pricingSetting",
            "method": "GET"
          }
        }
      ]
    },
    "links.EnableMarketplaceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/marketplaces/v1/MLT01/E1/enable",
            "method": "POST"
          }
        }
      ]
    },
    "links.DisableMarketplaceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/marketplaces/v1/MLT01/E1/disable",
            "method": "POST"
          }
        }
      ]
    },
    "links.DisableOrderImportationLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/marketplaces/v1/MLT01/E1/disableOrderImportation",
            "method": "POST"
          }
        }
      ]
    },
    "links.ReenableOrderImportationLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/marketplaces/v1/MLT01/E1/reenableOrderImportation",
            "method": "POST"
          }
        }
      ]
    },
    "links.DisableOfferImportationLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/marketplaces/v1/MLT01/E1/disableOfferImportation",
            "method": "POST"
          }
        }
      ]
    },
    "links.ReenableOfferImportationLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/marketplaces/v1/MLT01/E1/reenableOfferImportation",
            "method": "POST"
          }
        }
      ]
    },
    "links.DeclareOffersSourceMarketplaceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/marketplaces/v1/MLT01/E1/declareOffersSource",
            "method": "POST"
          }
        }
      ]
    },
    "links.UndeclareOffersSourceMarketplaceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/marketplaces/v1/MLT01/E1/undeclareOffersSource",
            "method": "POST"
          }
        }
      ]
    },
    "links.GetMarketplaceSubscriptionReportingLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/marketplaces/v1/MLT01/E1/disable",
            "method": "POST"
          }
        }
      ]
    },
    "marketplacesIndexLinks": {
      "type": "object",
      "properties": {
        "pricingRuleTypeLOV": {
          "$ref": "#/definitions/LOVLink3"
        },
        "shippingTypeStandardLOV": {
          "$ref": "#/definitions/LOVLink3"
        }
      }
    },
    "marketplacesIndex": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/marketplacesIndexLinks"
        },
        "marketplaces": {
          "type": "object",
          "description": "The key is the marketplace code",
          "additionalProperties": {
            "$ref": "#/definitions/marketplaceIndex"
          }
        }
      }
    },
    "marketplaceIndexLinks": {
      "type": "object",
      "properties": {
        "shippingTypeLOV": {
          "$ref": "#/definitions/LOVLink3"
        },
        "apiCredential": {
          "$ref": "#/definitions/links.GetMarketplaceApiCredentialLink"
        },
        "shippingSettings": {
          "$ref": "#/definitions/links.GetMarketplaceShippingSettingsLink"
        },
        "pricingSetting": {
          "$ref": "#/definitions/links.GetMarketplacePricingSettingLink"
        },
        "enable": {
          "$ref": "#/definitions/links.EnableMarketplaceLink"
        },
        "disable": {
          "$ref": "#/definitions/links.DisableMarketplaceLink"
        },
        "disableOrderImportation": {
          "$ref": "#/definitions/links.DisableOrderImportationLink"
        },
        "reenableOrderImportation": {
          "$ref": "#/definitions/links.ReenableOrderImportationLink"
        },
        "disableOfferImportation": {
          "$ref": "#/definitions/links.DisableOfferImportationLink"
        },
        "reenableOfferImportation": {
          "$ref": "#/definitions/links.ReenableOfferImportationLink"
        },
        "declareOffersSource": {
          "$ref": "#/definitions/links.DeclareOffersSourceMarketplaceLink"
        },
        "undeclareOffersSource": {
          "$ref": "#/definitions/links.UndeclareOffersSourceMarketplaceLink"
        },
        "reporting": {
          "$ref": "#/definitions/links.GetMarketplaceSubscriptionReportingLink"
        }
      }
    },
    "marketplaceIndex": {
      "type": "object",
      "properties": {
        "info": {
          "$ref": "#/definitions/marketplaceApiInfo"
        },
        "links": {
          "$ref": "#/definitions/marketplaceIndexLinks"
        }
      }
    },
    "offersPublicationStatus": {
      "type": "object",
      "description": "The status of the offer publication to the target marketplace",
      "required": [
        "apiIntegrationStatus"
      ],
      "properties": {
        "apiIntegrationStatus": {
          "$ref": "#/definitions/marketplaceApiIntegrationStatus"
        },
        "publishableOfferCount": {
          "type": "integer",
          "format": "int32",
          "description": "The publishable offer count for this target marketplace (considering the product matching)",
          "example": 25
        },
        "publishedOfferCount": {
          "type": "integer",
          "format": "int32",
          "description": "The published offer count to this target marketplace",
          "example": 20
        },
        "lastPublicationUtcDate": {
          "type": "string",
          "format": "date-time",
          "description": "The last synchronization of the offers from the source marketplace",
          "example": "2018-12-25T23:39:00Z"
        }
      }
    },
    "marketplaceApiInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/marketplaceInfo"
        },
        {
          "type": "object",
          "properties": {
            "offersPublicationStatus": {
              "$ref": "#/definitions/offersPublicationStatus"
            },
            "offersSourceStatus": {
              "$ref": "#/definitions/offersSourceStatus"
            }
          }
        }
      ]
    },
    "offersSourceStatus": {
      "type": "object",
      "description": "The status of the offer importation from the source marketplace",
      "required": [
        "apiIntegrationStatus"
      ],
      "properties": {
        "apiIntegrationStatus": {
          "$ref": "#/definitions/marketplaceApiIntegrationStatus"
        },
        "lastSynchronizationUtcDate": {
          "type": "string",
          "format": "date-time",
          "description": "The last synchronization of the offers from the source marketplace",
          "example": "2018-12-24T23:39:00Z"
        },
        "importedOfferCount": {
          "type": "integer",
          "format": "int32",
          "description": "The imported offer count from the source marketplace",
          "example": 52
        }
      }
    },
    "httpUrl": {
      "x-exclude": true,
      "description": "The URL <a href=\"https://en.wikipedia.org/wiki/URL\">https://en.wikipedia.org/wiki/URL</a>",
      "type": "string",
      "pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
      "example": "http://www.mydomain.com"
    },
    "merchantAccountIndexLinks": {
      "type": "object",
      "description": "The action you can do on the account API\nThe create and checkMerchantCode link will be available when the merchant code is not created\nThe account link will be available when the merchant has be created\n",
      "properties": {
        "create": {
          "$ref": "#/definitions/links.CreateMerchantAccountLink"
        },
        "checkMerchantCode": {
          "$ref": "#/definitions/links.CheckMerchantCodeAvailabilityLink"
        },
        "accountInfo": {
          "$ref": "#/definitions/links.GetMerchantAccountInfoLink"
        }
      }
    },
    "merchantAccountIndex": {
      "type": "object",
      "required": [
        "links"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/merchantAccountIndexLinks"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        }
      }
    },
    "createMerchantAccountRequest": {
      "type": "object",
      "required": [
        "code",
        "firstName",
        "lastName",
        "country",
        "companyName",
        "phoneNumber",
        "currencyCode",
        "ecommerceSoftwareName"
      ],
      "properties": {
        "code": {
          "$ref": "#/definitions/merchantCode"
        },
        "firstName": {
          "type": "string",
          "example": "Marilyn"
        },
        "lastName": {
          "type": "string",
          "example": "MONROE"
        },
        "country": {
          "$ref": "#/definitions/countryIsoCodeAlpha3"
        },
        "companyName": {
          "$ref": "#/definitions/merchantCompanyName"
        },
        "imageUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "phoneNumber": {
          "type": "string",
          "example": 663963036.0
        },
        "currencyCode": {
          "$ref": "#/definitions/currencyCode"
        },
        "ecommerceSoftwareName": {
          "$ref": "#/definitions/ecommerceSoftwareName"
        }
      }
    },
    "updateMerchantAccountRequest": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "country",
        "companyName",
        "phoneNumber",
        "currencyCode",
        "ecommerceSoftwareName"
      ],
      "properties": {
        "firstName": {
          "type": "string",
          "example": "Marilyn"
        },
        "lastName": {
          "type": "string",
          "example": "MONROE"
        },
        "country": {
          "$ref": "#/definitions/countryIsoCodeAlpha3"
        },
        "companyName": {
          "$ref": "#/definitions/merchantCompanyName"
        },
        "phoneNumber": {
          "type": "string",
          "example": 663963036.0
        },
        "imageUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "currencyCode": {
          "$ref": "#/definitions/currencyCode"
        },
        "ecommerceSoftwareName": {
          "$ref": "#/definitions/ecommerceSoftwareName"
        }
      }
    },
    "apiToken": {
      "type": "string",
      "description": "The api token that you will have to use to connect to our API",
      "example": "2b1ff3a068054433ac09224bbb1ff3a068054433ac09224bb0c9d7ea=="
    },
    "merchantAccountInfo": {
      "type": "object",
      "required": [
        "merchantCode",
        "email",
        "firstName",
        "lastName",
        "country",
        "companyName",
        "phoneNumber",
        "currencyCode",
        "links"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "email": {
          "$ref": "#/definitions/email"
        },
        "firstName": {
          "type": "string",
          "example": "Marilyn"
        },
        "lastName": {
          "type": "string",
          "example": "MONROE"
        },
        "country": {
          "$ref": "#/definitions/countryIsoCodeAlpha3"
        },
        "companyName": {
          "$ref": "#/definitions/merchantCompanyName"
        },
        "phoneNumber": {
          "type": "string",
          "example": 663963036.0
        },
        "imageUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "currencyCode": {
          "$ref": "#/definitions/currencyCode"
        },
        "ecommerceSoftwareName": {
          "$ref": "#/definitions/ecommerceSoftwareName"
        },
        "importedOfferCount": {
          "type": "integer",
          "format": "int32",
          "description": "Imported offer count from the source marketplace or from his shop system source",
          "example": 4242
        },
        "links": {
          "$ref": "#/definitions/merchantAccountInfoLinks"
        }
      }
    },
    "merchantAccountInfoLinks": {
      "type": "object",
      "description": "The action you can do on a merchant.\nThe external link will be avaible if there is no subscription requested\n",
      "required": [
        "self",
        "update",
        "resetApiToken"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetMerchantAccountInfoLink"
        },
        "update": {
          "$ref": "#/definitions/links.UpdateMerchantAccountInfoLink"
        },
        "getApiToken": {
          "$ref": "#/definitions/links.GetMerchantApiTokenLink"
        },
        "resetApiToken": {
          "$ref": "#/definitions/links.ResetMerchantApiTokenLink"
        },
        "externalMarketplaceSubscription": {
          "$ref": "#/definitions/links.ExternalMarketplaceSubscriptionFormLink"
        }
      }
    },
    "links.CreateMerchantAccountLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/account/v1/create",
            "method": "POST"
          }
        }
      ]
    },
    "links.CheckMerchantCodeAvailabilityLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/account/v1/checkMerchantCode",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetMerchantAccountInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/account/v1/MLT01",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetMerchantApiTokenLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/account/v1/MLT01/apiToken",
            "method": "GET"
          }
        }
      ]
    },
    "links.ResetMerchantApiTokenLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/account/v1/MLT01/apiToken/reset",
            "method": "POST"
          }
        }
      ]
    },
    "links.UpdateMerchantAccountInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "example": {
            "href": "/merchant/account/v1/MLT01",
            "method": "PATCH"
          }
        }
      ]
    },
    "links.ExternalMarketplaceSubscriptionFormLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "type": "object",
          "description": "The link to sales force form to easily subscribe to the marketplaces\nThe query string will be indicated by the server:\n- email: the email of the merchant\n- merchantCode: The merchant code\n- hmac: Computed by the server with a shared secret key\n",
          "example": {
            "href": "https://imn-developer-edition.eu9.force.com/?email=myemail@mydomain.com&merchantCode=MLT01&hmac=M2JiMmFkY2QwMTY1MjhkM2Y3ZGFmMGZlNjE5ODk1ZDE5NDVjMWQzZGRmNjMyNzkyYzVlMTZmZDQ1YmM1M2ZlOA==#general",
            "method": "GET"
          }
        }
      ]
    },
    "reportStatusByMarketplace": {
      "type": "object",
      "required": [
        "toAccept",
        "inTimeToShip",
        "lateToShip",
        "marketplaceCode"
      ],
      "properties": {
        "toAccept": {
          "type": "integer",
          "description": "The order count to accept",
          "example": 10
        },
        "inTimeToShip": {
          "type": "integer",
          "description": "The order count in time to ship",
          "example": 34
        },
        "lateToShip": {
          "type": "integer",
          "description": "The order count late to ship",
          "example": 56
        },
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        }
      }
    },
    "reportByDayRequest": {
      "required": [
        "beginPeriodUtcDate",
        "endPeriodUtcDate"
      ],
      "type": "object",
      "properties": {
        "marketplaceCodes": {
          "description": "Indicate the marketplace identifier list",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/marketplaceCode"
          },
          "example": [
            "C1",
            "E1",
            "R1"
          ]
        },
        "beginPeriodUtcDate": {
          "type": "string",
          "format": "date",
          "description": "The begin date of the period for the report",
          "example": "2006-11-20T00:00:00Z"
        },
        "endPeriodUtcDate": {
          "type": "string",
          "format": "date",
          "description": "The end date of the period for the report",
          "example": "2006-12-20T00:00:00Z"
        }
      }
    },
    "reportByDayResponse": {
      "type": "object",
      "required": [
        "days"
      ],
      "properties": {
        "days": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reportByDay"
          }
        }
      }
    },
    "reportByDay": {
      "type": "object",
      "required": [
        "day",
        "byMarketplaces"
      ],
      "properties": {
        "day": {
          "type": "string",
          "format": "date",
          "example": "2017-04-23"
        },
        "byMarketplaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reportByDayByMarketplace"
          }
        }
      }
    },
    "reportByDayByMarketplace": {
      "type": "object",
      "required": [
        "marketplaceCode",
        "currencyCode",
        "orderCount",
        "turnover"
      ],
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "currencyCode": {
          "$ref": "#/definitions/currencyCode"
        },
        "orderCount": {
          "type": "integer",
          "description": "The order count",
          "example": 42
        },
        "turnover": {
          "type": "number",
          "description": "The turnover",
          "example": 234.42
        }
      }
    },
    "orderListRequestWithoutPagination": {
      "type": "object",
      "required": [
        "dateSearchType",
        "beginPeriodUtcDate",
        "endPeriodUtcDate"
      ],
      "properties": {
        "marketplaceCodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/marketplaceCode"
          },
          "example": [
            "C1"
          ]
        },
        "late": {
          "type": "boolean",
          "description": "Looking for late orders",
          "example": true
        },
        "imnOrderStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/imnOrderStatus"
          },
          "example": [
            "InProgress"
          ]
        },
        "dateSearchType": {
          "$ref": "#/definitions/orderDateSearchType"
        },
        "beginPeriodUtcDate": {
          "description": "The begin period you want to make the search. \\\nThe period MUST not be greater than 30 days.\nThe begin period MUST be lower than the end period.\n",
          "format": "date-time",
          "type": "string",
          "example": "2017-03-01T13:10:01Z"
        },
        "endPeriodUtcDate": {
          "description": "The end period of you search. \\\nThe period MUST not be greater than 30 days. \\\nThe end period MUST be greater than the begin period.\nThe end period MUST be lower to the current date.\n",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:10:01Z"
        },
        "buyerFirstName": {
          "$ref": "#/definitions/firstName"
        },
        "buyerLastName": {
          "$ref": "#/definitions/lastName"
        },
        "marketplaceOrderIds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/marketplaceOrderId"
          },
          "example": [
            "CdiscountOrderId1234"
          ]
        },
        "merchantOrderIds": {
          "description": "Merchant order id list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/merchantOrderId"
          },
          "example": [
            "MyOrderId1234"
          ]
        }
      }
    },
    "orderListRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/orderListRequestWithoutPagination"
        },
        {
          "type": "object",
          "required": [
            "dateSearchType",
            "beginPeriodUtcDate",
            "endPeriodUtcDate",
            "pageSize",
            "pageNumber"
          ],
          "properties": {
            "pageSize": {
              "$ref": "#/definitions/pageSize"
            },
            "pageNumber": {
              "$ref": "#/definitions/pageNumber"
            }
          }
        }
      ]
    },
    "orderLightIndex": {
      "type": "object",
      "required": [
        "info",
        "links",
        "transitionLinks"
      ],
      "properties": {
        "info": {
          "$ref": "#/definitions/orderLightInfo"
        },
        "links": {
          "$ref": "#/definitions/orderLinks"
        },
        "transitionLinks": {
          "$ref": "#/definitions/orderTransitionLinks"
        }
      }
    },
    "orderLightInfo": {
      "type": "object",
      "required": [
        "marketplaceCode",
        "merchantCode",
        "marketplaceOrderId",
        "imnOrderStatus",
        "marketplaceOrderStatus",
        "purchaseUtcDate",
        "marketplaceLastModificationUtcDate",
        "etag",
        "imnLastModificationUtcDate",
        "totalPrice",
        "currencyCode",
        "customerFullName"
      ],
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "marketplaceOrderId": {
          "$ref": "#/definitions/marketplaceOrderId"
        },
        "imnOrderStatus": {
          "$ref": "#/definitions/imnOrderStatus"
        },
        "marketplaceOrderStatus": {
          "$ref": "#/definitions/marketplaceOrderStatus"
        },
        "purchaseUtcDate": {
          "description": "The purchase date of this order",
          "format": "date-time",
          "type": "string",
          "example": "2017-03-31T21:30:23Z"
        },
        "marketplaceLastModificationUtcDate": {
          "description": "The last modification UTC date done by the marketplace on this order",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-16T10:25:23Z"
        },
        "etag": {
          "$ref": "#/definitions/orderEtag"
        },
        "imnLastModificationUtcDate": {
          "description": "The last modification UTC date done by IMN of this order",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-16T10:30:23Z"
        },
        "currentOrderChangeCorrelationId": {
          "$ref": "#/definitions/correlationId"
        },
        "marketplaceChannel": {
          "description": "Useful to identify the origin of the order. For example in Cdiscount.",
          "type": "string",
          "example": "Cdiscount France"
        },
        "totalPrice": {
          "description": "The total price of this order (corresponding to the amount paid by the customer)",
          "format": "decimal",
          "type": "number",
          "example": 101.42
        },
        "currencyCode": {
          "$ref": "#/definitions/currencyCode"
        },
        "customerFullName": {
          "type": "string",
          "description": "The customer full name"
        }
      }
    },
    "links.GetOrderLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "example": {
            "href": "/merchant/orders/v1/MLT01/C1/A0CD3FG",
            "method": "GET"
          }
        }
      ]
    },
    "orderLinks": {
      "type": "object",
      "description": "The links related to an order.\nThe \"go\" property is the link to see the order on https://go.imn.io\nExample: TBD\n",
      "required": [
        "self",
        "go",
        "history",
        "setMerchantInfo",
        "clearMerchantInfo"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetOrderLink"
        },
        "go": {
          "$ref": "#/definitions/httpUrl"
        },
        "history": {
          "$ref": "#/definitions/links.GetOrderHistoryLink"
        },
        "setMerchantInfo": {
          "$ref": "#/definitions/links.SetMerchantOrderInfoLink"
        },
        "clearMerchantInfo": {
          "$ref": "#/definitions/links.ClearMerchantOrderInfoLink"
        },
        "abortCurrentOrderChange": {
          "$ref": "#/definitions/links.AbortOrderChangeLink"
        }
      }
    },
    "links.GetOrderHistoryLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "example": {
            "href": "/merchant/orders/v1/MLT01/C1/A0CD3FG/history",
            "method": "GET"
          }
        }
      ]
    },
    "links.SetMerchantOrderInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "example": {
            "href": "/merchant/orders/v1/MLT01/C1/A0CD3FG/setMerchantOrderInfo",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "type": "object",
                "schema": "setMerchantOrderInfoRequest"
              }
            }
          }
        }
      ]
    },
    "links.ClearMerchantOrderInfoLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "example": {
            "href": "/merchant/orders/v1/MLT01/C1/A0CD3FG/clearMerchantOrderInfo",
            "method": "POST"
          }
        }
      ]
    },
    "orderIndex": {
      "type": "object",
      "description": "Describe in details all informations related to an order.",
      "required": [
        "info",
        "links",
        "transitionLinks"
      ],
      "properties": {
        "info": {
          "$ref": "#/definitions/orderInfo"
        },
        "links": {
          "$ref": "#/definitions/orderLinks"
        },
        "transitionLinks": {
          "$ref": "#/definitions/orderTransitionLinks"
        }
      }
    },
    "links.ShipOrderLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.ShipOrderWithTrackingUrlLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.RefundOrderLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.AcceptOrderLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.RefuseOrderLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.CancelOrderLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "links.AbortOrderChangeLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        }
      ]
    },
    "orderTransitionLinks": {
      "description": "Contains the authorized change actions for an order",
      "type": "object",
      "properties": {
        "accept": {
          "$ref": "#/definitions/links.AcceptOrderLink"
        },
        "refuse": {
          "$ref": "#/definitions/links.RefuseOrderLink"
        },
        "cancel": {
          "$ref": "#/definitions/links.CancelOrderLink"
        },
        "ship": {
          "$ref": "#/definitions/links.ShipOrderLink"
        },
        "shipWithTrackingUrl": {
          "$ref": "#/definitions/links.ShipOrderWithTrackingUrlLink"
        },
        "refund": {
          "$ref": "#/definitions/links.RefundOrderLink"
        }
      }
    },
    "orderApiIndex": {
      "type": "object",
      "required": [
        "links",
        "lovLinks"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/orderApiIndexLinks"
        }
      }
    },
    "links.GetOrderApiIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "example": {
            "href": "/merchant/orders/v1/MLT01",
            "method": "GET"
          }
        }
      ]
    },
    "orderApiIndexLinks": {
      "description": "Gives you all entry point operations you can do on this API",
      "type": "object",
      "required": [
        "self",
        "orders"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetOrderApiIndexLink"
        },
        "orders": {
          "$ref": "#/definitions/links.GetOrderListFullLink"
        }
      }
    },
    "links.GetOrderListFullLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "example": {
            "href": "/merchant/orders/v1/MLT01/list/full",
            "method": "POST",
            "properties": {
              "Accept-Encoding": {
                "in": "header",
                "required": true,
                "type": "â€‹string",
                "schema": "string"
              },
              "request": {
                "in": "body",
                "required": false,
                "type": "object",
                "schema": "orderListRequest"
              }
            }
          }
        }
      ]
    },
    "links.GetOrderListLightLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "example": {
            "href": "/merchant/orders/v1/MLT01/list/light",
            "method": "POST",
            "properties": {
              "request": {
                "in": "body",
                "required": false,
                "type": "object",
                "schema": "orderListRequest"
              }
            }
          }
        }
      ]
    },
    "orderListFullLinks": {
      "type": "object",
      "description": "The list of actions you can do from the order list response",
      "required": [
        "self",
        "setMerchantInfos",
        "clearMerchantInfos"
      ],
      "properties": {
        "setMerchantInfos": {
          "$ref": "#/definitions/links.SetMerchantOrderInfoListLink"
        },
        "clearMerchantInfos": {
          "$ref": "#/definitions/links.ClearMerchantOrderInfoListLink"
        },
        "self": {
          "$ref": "#/definitions/links.GetOrderListFullLink"
        }
      }
    },
    "orderListLightLinks": {
      "type": "object",
      "description": "The list of actions you can do from the order list response",
      "required": [
        "self",
        "setMerchantInfos",
        "clearMerchantInfos"
      ],
      "properties": {
        "setMerchantInfos": {
          "$ref": "#/definitions/links.SetMerchantOrderInfoListLink"
        },
        "clearMerchantInfos": {
          "$ref": "#/definitions/links.ClearMerchantOrderInfoListLink"
        },
        "self": {
          "$ref": "#/definitions/links.GetOrderListLightLink"
        }
      }
    },
    "links.SetMerchantOrderInfoListLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "example": {
            "href": "/merchant/orders/v1/setMerchantOrderInfos",
            "method": "POST",
            "parameters": {
              "request": {
                "in": "body",
                "required": true,
                "type": "object",
                "schema": "setMerchantOrderInfoRequest"
              }
            }
          }
        }
      ]
    },
    "links.ClearMerchantOrderInfoListLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "example": {
            "href": "/merchant/orders/v1/clearMerchantOrderInfos",
            "method": "POST"
          }
        }
      ]
    },
    "orderListFull": {
      "description": "The order list with all information we have from the orders and its items.\\\nThe paginationResult properties can be null if the list is empty.\n",
      "type": "object",
      "required": [
        "links",
        "orders"
      ],
      "properties": {
        "paginationResult": {
          "$ref": "#/definitions/paginationResult"
        },
        "fullInfoNotSynchronized": {
          "type": "array",
          "description": "The order index list light in case there is some issue during the synchronization of the full info. This list should be empty or null most of the time. It has been developed for sanity check and explain the order count which is based on the order light info.",
          "minimum": 0,
          "items": {
            "$ref": "#/definitions/orderLightIndex"
          }
        },
        "orders": {
          "type": "array",
          "description": "The order index list, this list can be empty if there is no result",
          "minimum": 0,
          "items": {
            "$ref": "#/definitions/orderIndex"
          }
        },
        "links": {
          "$ref": "#/definitions/orderListFullLinks"
        }
      }
    },
    "orderListLight": {
      "description": "The order list with all information we have from the orders and its items.\\\nThe paginationResult properties can be null if the list is empty.\n",
      "type": "object",
      "required": [
        "links",
        "orders"
      ],
      "properties": {
        "paginationResult": {
          "$ref": "#/definitions/paginationResult"
        },
        "orders": {
          "type": "array",
          "description": "The order index list, this list can be empty if there is no result",
          "minimum": 0,
          "items": {
            "$ref": "#/definitions/orderLightIndex"
          }
        },
        "links": {
          "$ref": "#/definitions/orderListLightLinks"
        }
      }
    },
    "orderHistory": {
      "description": "Describe the history related to an order",
      "type": "object",
      "required": [
        "synchronizationReportings",
        "changeOrderReportings",
        "links"
      ],
      "properties": {
        "synchronizationReportings": {
          "description": "The list of order synchronization operation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/orderSynchronizationReporting"
          }
        },
        "changeOrderReportings": {
          "description": "The list of change order operation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/changeOrderReporting"
          }
        },
        "lastModificationUtcDate": {
          "format": "date-time",
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/orderHistoryLinks"
        }
      }
    },
    "orderHistoryLinks": {
      "type": "object",
      "properties": {
        "abortCurrentOrderChange": {
          "$ref": "#/definitions/links.AbortOrderChangeLink"
        }
      }
    },
    "orderSynchronizationReporting": {
      "description": "The reporting related to a order synchronization operation",
      "type": "object",
      "required": [
        "messageId",
        "imnOrderStatus",
        "marketplaceOrderStatus",
        "imnLastModificationUtcDate",
        "marketplaceLastModificationUtcDate"
      ],
      "properties": {
        "messageId": {
          "$ref": "#/definitions/messageId"
        },
        "imnOrderStatus": {
          "$ref": "#/definitions/imnOrderStatus"
        },
        "marketplaceOrderStatus": {
          "$ref": "#/definitions/marketplaceOrderStatus"
        },
        "imnLastModificationUtcDate": {
          "type": "string",
          "format": "date-time"
        },
        "marketplaceLastModificationUtcDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "changeOrderReporting": {
      "description": "The reporting related to a change order operation",
      "type": "object",
      "required": [
        "correlationId",
        "changeType",
        "sourceType",
        "sourceUserId",
        "sourceUserName",
        "creationUtcDate",
        "processingStatus",
        "lastUpdateUtcDate",
        "sourceUserIPAddress",
        "sourceUserEmail",
        "testMode"
      ],
      "properties": {
        "correlationId": {
          "$ref": "#/definitions/correlationId"
        },
        "changeType": {
          "$ref": "#/definitions/orderChangeType"
        },
        "sourceType": {
          "$ref": "#/definitions/operationSourceType"
        },
        "sourceUserId": {
          "$ref": "#/definitions/userId"
        },
        "sourceUserName": {
          "type": "string",
          "example": "Guillaume Tell"
        },
        "creationUtcDate": {
          "description": "The creation UTC date of the execution",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:10:03Z"
        },
        "processingStatus": {
          "$ref": "#/definitions/processingStatus"
        },
        "lastUpdateUtcDate": {
          "description": "The last update UTC date of the execution",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-01T13:10:05Z"
        },
        "error": {
          "$ref": "#/definitions/userErrorMessage"
        },
        "sourceUserIPAddress": {
          "description": "The IP address who request this operation",
          "type": "string",
          "example": "127.0.0.1"
        },
        "sourceUserEmail": {
          "$ref": "#/definitions/email"
        },
        "testMode": {
          "description": "This operation was a test",
          "type": "boolean",
          "example": false
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "refundOrderRequest": {
      "type": "object",
      "description": "The refund order parameters",
      "required": [
        "refundReason"
      ],
      "properties": {
        "refundReason": {
          "$ref": "#/definitions/refundReason"
        }
      }
    },
    "cancelOrderRequest": {
      "type": "object",
      "description": "The cancel order parameters",
      "required": [
        "cancellationReason"
      ],
      "properties": {
        "cancellationReason": {
          "$ref": "#/definitions/cancellationReason"
        }
      }
    },
    "shipOrderRequest": {
      "type": "object",
      "description": "The ship order parameters",
      "required": [
        "trackingNumber",
        "carrierCode"
      ],
      "properties": {
        "trackingNumber": {
          "$ref": "#/definitions/trackingNumber"
        },
        "carrierCode": {
          "$ref": "#/definitions/carrierCode"
        }
      },
      "example": {
        "trackingNumber": "1H01845163783",
        "carrierCode": "MondialRelay"
      }
    },
    "shipOrderWithTrackingUrlRequest": {
      "type": "object",
      "description": "The ship order parameters for an unidentified carrier in the carrierCode enum",
      "required": [
        "carrierName",
        "trackingNumber",
        "trackingUrl"
      ],
      "properties": {
        "carrierName": {
          "$ref": "#/definitions/carrierName"
        },
        "trackingNumber": {
          "$ref": "#/definitions/trackingNumber"
        },
        "trackingUrl": {
          "$ref": "#/definitions/trackingUrl"
        }
      },
      "example": {
        "carrierName": "My special carrier name",
        "trackingNumber": "1H01845163783",
        "shippingUrl": "https://trackingpackage.com?number=1H01845163783"
      }
    },
    "batchOrderOperationResponse": {
      "description": "The response given by the batch operation",
      "type": "object",
      "required": [
        "operations"
      ],
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/orderOperationResponse"
          }
        }
      }
    },
    "orderOperationResponse": {
      "description": "The response given by the batch operation for an order",
      "type": "object",
      "required": [
        "order",
        "operationId",
        "operationMonitoringUrl",
        "success",
        "status"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "operationId": {
          "$ref": "#/definitions/correlationId"
        },
        "operationMonitoringHref": {
          "$ref": "#/definitions/href"
        },
        "success": {
          "type": "boolean",
          "description": "Indicates if the operation succeed or not",
          "example": true
        },
        "status": {
          "type": "integer",
          "description": "Indicates the http status corresponding to the individual operation",
          "example": 202
        },
        "errors": {
          "description": "The error list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/userErrorMessage"
          }
        }
      }
    },
    "createSubscriptionRequest": {
      "type": "object",
      "required": [
        "targetUrl",
        "name",
        "applicationName"
      ],
      "properties": {
        "targetUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "name": {
          "$ref": "#/definitions/subscriptionName"
        },
        "applicationName": {
          "$ref": "#/definitions/subscriptionApplicationName"
        },
        "applicationVersion": {
          "$ref": "#/definitions/subscriptionApplicationVersion"
        }
      }
    },
    "subscriptionName": {
      "type": "string",
      "description": "The subscription name you want to use",
      "example": "MySubscriptionName"
    },
    "subscriptionApplicationName": {
      "type": "string",
      "description": "The name of your application",
      "example": "MyApp"
    },
    "subscriptionApplicationVersion": {
      "type": "string",
      "description": "The version of your application",
      "default": "1.0",
      "example": "1.0"
    },
    "subscription": {
      "type": "object",
      "description": "The subscription definition",
      "required": [
        "id",
        "targetUrl",
        "status",
        "name",
        "applicationName",
        "applicationVersion"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/subscriptionId"
        },
        "status": {
          "$ref": "#/definitions/subscriptionStatus"
        },
        "targetUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "name": {
          "$ref": "#/definitions/subscriptionName"
        },
        "applicationName": {
          "$ref": "#/definitions/subscriptionApplicationName"
        },
        "applicationVersion": {
          "$ref": "#/definitions/subscriptionApplicationVersion"
        }
      }
    },
    "subscriptionId": {
      "type": "string",
      "format": "guid"
    },
    "subscriptionStatus": {
      "type": "string",
      "description": "The status of your subscription",
      "enum": [
        "Active",
        "Inactive"
      ]
    },
    "orderChangeRequestBase": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Optional. Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application's user login. Default value is the connected user's email address."
        },
        "useTest": {
          "type": "boolean",
          "description": "Optional. If true, the operation will be not be sent to marketplace. But the validation will be taken in account. Default value is false."
        }
      }
    },
    "shipOrderListRequest": {
      "type": "object",
      "required": [
        "orders"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "maxItems": 100,
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/shipOrderListRequestItem"
          }
        }
      }
    },
    "shipOrderListRequestItem": {
      "type": "object",
      "required": [
        "order",
        "request",
        "etag"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "request": {
          "$ref": "#/definitions/shipOrderRequest"
        },
        "etag": {
          "$ref": "#/definitions/orderEtag"
        }
      }
    },
    "shipOrderWithTrackingUrlListRequest": {
      "type": "object",
      "required": [
        "orders"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "maxItems": 100,
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/shipOrderWithTrackingUrlListRequestItem"
          }
        }
      }
    },
    "shipOrderWithTrackingUrlListRequestItem": {
      "type": "object",
      "required": [
        "order",
        "request",
        "etag"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "request": {
          "$ref": "#/definitions/shipOrderWithTrackingUrlRequest"
        },
        "etag": {
          "$ref": "#/definitions/orderEtag"
        }
      }
    },
    "refundOrderListRequest": {
      "type": "object",
      "required": [
        "orders"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "maxItems": 100,
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/refundOrderListRequestItem"
          }
        }
      }
    },
    "refundOrderListRequestItem": {
      "type": "object",
      "required": [
        "order",
        "request",
        "etag"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "request": {
          "$ref": "#/definitions/refundOrderRequest"
        },
        "etag": {
          "$ref": "#/definitions/orderEtag"
        }
      }
    },
    "cancelOrderListRequest": {
      "type": "object",
      "required": [
        "orders"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "maxItems": 100,
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/cancelOrderListRequestItem"
          }
        }
      }
    },
    "cancelOrderListRequestItem": {
      "type": "object",
      "required": [
        "order",
        "request",
        "etag"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "request": {
          "$ref": "#/definitions/cancelOrderRequest"
        },
        "etag": {
          "$ref": "#/definitions/orderEtag"
        }
      }
    },
    "acceptOrderListRequest": {
      "type": "object",
      "required": [
        "orders"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "maxItems": 100,
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/acceptOrderListRequestItem"
          }
        }
      }
    },
    "acceptOrderListRequestItem": {
      "type": "object",
      "required": [
        "order",
        "etag"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "etag": {
          "$ref": "#/definitions/orderEtag"
        }
      }
    },
    "refuseOrderListRequest": {
      "type": "object",
      "required": [
        "orders"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "maxItems": 100,
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/refuseOrderListRequestItem"
          }
        }
      }
    },
    "refuseOrderListRequestItem": {
      "type": "object",
      "required": [
        "order",
        "etag"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "etag": {
          "$ref": "#/definitions/orderEtag"
        }
      }
    },
    "clearMerchantOrderInfoListRequest": {
      "type": "object",
      "required": [
        "orders"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "maxItems": 100,
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/clearMerchantOrderInfoListRequestItem"
          }
        }
      }
    },
    "clearMerchantOrderInfoListRequestItem": {
      "type": "object",
      "required": [
        "order"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        }
      }
    },
    "setMerchantOrderInfoListRequest": {
      "type": "object",
      "required": [
        "merchantECommerceSoftwareName",
        "merchantECommerceSoftwareVersion",
        "orders"
      ],
      "properties": {
        "merchantECommerceSoftwareName": {
          "$ref": "#/definitions/ecommerceSoftwareName"
        },
        "merchantECommerceSoftwareVersion": {
          "$ref": "#/definitions/merchantECommerceSoftwareVersion"
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/setMerchantOrderInfoListRequestItem"
          },
          "maxItems": 100,
          "uniqueItems": true,
          "minItems": 1,
          "example": [
            {
              "order": {
                "marketplaceCode": "C1",
                "merchantCode": "MLT01",
                "marketplaceOrderId": "X0CD8FG"
              },
              "merchantOrderId": "BX1234"
            }
          ]
        }
      }
    },
    "setMerchantOrderInfoListRequestItem": {
      "type": "object",
      "required": [
        "order",
        "merchantOrderId"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "merchantOrderId": {
          "$ref": "#/definitions/merchantOrderId"
        }
      }
    },
    "setMerchantOrderInfoRequest": {
      "type": "object",
      "required": [
        "merchantOrderId",
        "merchantECommerceSoftwareName",
        "merchantECommerceSoftwareVersion"
      ],
      "properties": {
        "merchantOrderId": {
          "$ref": "#/definitions/merchantOrderId"
        },
        "merchantECommerceSoftwareName": {
          "$ref": "#/definitions/ecommerceSoftwareName"
        },
        "merchantECommerceSoftwareVersion": {
          "$ref": "#/definitions/merchantECommerceSoftwareVersion"
        }
      }
    },
    "userLovIndex": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/userLovIndexLinks"
        }
      }
    },
    "userLovIndexLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetUserLovIndexLink"
        },
        "lists": {
          "$ref": "#/definitions/userLovLinks"
        }
      }
    },
    "userLovLinks": {
      "description": "List of lov link. The key is the list name.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/links.GetUserListOfValuesLink"
      }
    },
    "links.GetUserListOfValuesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "example": {
            "href": "/merchant/lov/v1/Go2CultureName",
            "method": "GET"
          }
        }
      ]
    },
    "links.GetUserLovIndexLink": {
      "allOf": [
        {
          "$ref": "#/definitions/link3"
        },
        {
          "example": {
            "href": "/merchant/lov/v1",
            "method": "GET"
          }
        }
      ]
    },
    "userListOfValuesResponse": {
      "type": "object",
      "properties": {
        "links": {
          "$ref": "#/definitions/userListOfValuesResponseLinks"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/listOfValueItem"
          }
        }
      }
    },
    "userListOfValuesResponseLinks": {
      "type": "object",
      "properties": {
        "self": {
          "$ref": "#/definitions/links.GetUserListOfValuesLink"
        }
      }
    },
    "externalMerchantMarketplaceSubscriptions": {
      "type": "object",
      "description": "When the merchant marketplace subscription has been requested",
      "required": [
        "merchantCode",
        "userId",
        "sourceMarketplaceCode",
        "targetMarketplacesSubscriptionRequested",
        "subscriptionRequestUtcDate",
        "salesforceSubscriptionId"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "sourceMarketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "targetMarketplacesSubscriptionRequested": {
          "type": "array",
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/marketplaceCode"
          }
        },
        "subscriptionRequestUtcDate": {
          "type": "string",
          "format": "date-time",
          "description": "The exact date time of the subscription request"
        },
        "salesforceSubscriptionId": {
          "type": "string",
          "description": "The Salesforce identifier of the subscription",
          "example": "BLA0O00001v8aNuQAI"
        }
      }
    },
    "beezUPOrderId": {
      "description": "The BeezUP Order identifier",
      "type": "string"
    },
    "beezUPOrderIdentifier": {
      "description": "The BeezUP order identifier",
      "type": "object",
      "required": [
        "marketplaceTechnicalCode",
        "accountId",
        "beezUPOrderId"
      ],
      "properties": {
        "marketplaceTechnicalCode": {
          "$ref": "#/definitions/beezUPMarketplaceTechnicalCode"
        },
        "accountId": {
          "$ref": "#/definitions/beezUPMarketplaceAccountId"
        },
        "beezUPOrderId": {
          "$ref": "#/definitions/beezUPOrderId"
        }
      }
    },
    "beezUPOrderChangeExecution": {
      "x-exclude": true,
      "allOf": [
        {
          "$ref": "#/definitions/beezUPOrderIdentifier"
        },
        {
          "type": "object",
          "description": "The BeezUP order change execution",
          "required": [
            "executionId",
            "processingStatus"
          ],
          "properties": {
            "executionId": {
              "$ref": "#/definitions/beezUPExecutionId"
            },
            "processingStatus": {
              "$ref": "#/definitions/processingStatus"
            },
            "errorCode": {
              "type": "string"
            },
            "errorMessage": {
              "type": "string"
            }
          }
        }
      ]
    },
    "beezUPOrderChangeExecutionSummary": {
      "allOf": [
        {
          "$ref": "#/definitions/beezUPOrderChangeExecution"
        },
        {
          "type": "object",
          "description": "The BeezUP order change execution summary",
          "required": [
            "correlationId",
            "merchantCode",
            "marketplaceCode",
            "marketplaceOrderId"
          ],
          "properties": {
            "executionId": {
              "$ref": "#/definitions/beezUPExecutionId"
            },
            "correlationId": {
              "$ref": "#/definitions/correlationId"
            },
            "merchantCode": {
              "$ref": "#/definitions/merchantCode"
            },
            "marketplaceCode": {
              "$ref": "#/definitions/marketplaceCode"
            },
            "marketplaceOrderId": {
              "$ref": "#/definitions/marketplaceOrderId"
            }
          }
        }
      ]
    },
    "orderReceived": {
      "x-format": "Event",
      "description": "This event his a technical one. It is stored in the event hub before it's processed by the OrderActor.\nThe order actor will create business event like order created or updated.\nOrderReceived will be not be stored in the Event Store.\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderMarketplaceInfo"
        }
      ]
    },
    "orderMerchantInfoConfigured": {
      "x-format": "Event",
      "type": "object",
      "required": [
        "order",
        "merchantInfo",
        "userId",
        "userEmail",
        "userIPAddress"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "merchantInfo": {
          "$ref": "#/definitions/orderMerchantInfo"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "userEmail": {
          "$ref": "#/definitions/email"
        },
        "userIPAddress": {
          "description": "The IP address who request this operation",
          "type": "string",
          "example": "127.0.0.1"
        }
      }
    },
    "orderMerchantInfoCleared": {
      "x-format": "Event",
      "type": "object",
      "required": [
        "order",
        "userId",
        "userEmail",
        "userIPAddress"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "userEmail": {
          "$ref": "#/definitions/email"
        },
        "userIPAddress": {
          "description": "The IP address who request this operation",
          "type": "string",
          "example": "127.0.0.1"
        }
      }
    },
    "orderChangeEventBase": {
      "x-exclude": true,
      "allOf": [
        {
          "type": "object",
          "discriminator": "eventName",
          "required": [
            "order",
            "userId",
            "userName",
            "userEmail",
            "userIPAddress",
            "testMode",
            "sourceType",
            "eventType"
          ],
          "properties": {
            "order": {
              "$ref": "#/definitions/orderIdentifier"
            },
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userName": {
              "$ref": "#/definitions/orderChangeUserName"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "description": "The IP address who request this operation",
              "type": "string",
              "example": "127.0.0.1"
            },
            "testMode": {
              "description": "This operation was a test",
              "type": "boolean",
              "example": false
            },
            "sourceType": {
              "$ref": "#/definitions/operationSourceType"
            },
            "eventType": {
              "type": "string",
              "description": "The event type occured on the order"
            }
          }
        }
      ]
    },
    "orderAccepted": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        }
      ]
    },
    "orderRefused": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        }
      ]
    },
    "orderShipped": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "userEmail",
            "userIPAddress",
            "carrierCode",
            "trackingNumber",
            "testMode",
            "sourceType"
          ],
          "properties": {
            "carrierCode": {
              "$ref": "#/definitions/carrierCode"
            },
            "trackingNumber": {
              "$ref": "#/definitions/trackingNumber"
            }
          }
        }
      ]
    },
    "orderShippedWithTrackingUrl": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "userEmail",
            "userIPAddress",
            "carrierName",
            "trackingNumber",
            "trackingUrl",
            "testMode",
            "sourceType"
          ],
          "properties": {
            "carrierName": {
              "$ref": "#/definitions/carrierName"
            },
            "trackingNumber": {
              "$ref": "#/definitions/trackingNumber"
            },
            "trackingUrl": {
              "$ref": "#/definitions/trackingUrl"
            }
          }
        }
      ]
    },
    "orderRefunded": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "userEmail",
            "userIPAddress",
            "refundReason",
            "testMode",
            "sourceType"
          ],
          "properties": {
            "refundReason": {
              "$ref": "#/definitions/refundReason"
            }
          }
        }
      ]
    },
    "orderCancelled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeEventBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "userEmail",
            "userIPAddress",
            "cancellationReason",
            "testMode",
            "sourceType"
          ],
          "properties": {
            "cancellationReason": {
              "$ref": "#/definitions/cancellationReason"
            }
          }
        }
      ]
    },
    "orderChangeCompleted": {
      "x-format": "Event",
      "type": "object",
      "required": [
        "order",
        "status"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "status": {
          "$ref": "#/definitions/processingStatus"
        },
        "error": {
          "$ref": "#/definitions/userErrorMessage"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "userEmail": {
          "$ref": "#/definitions/email"
        },
        "userIPAddress": {
          "description": "The IP address who request this operation",
          "type": "string",
          "example": "127.0.0.1"
        }
      }
    },
    "orderShipmentOverdue": {
      "x-format": "Event",
      "type": "object",
      "required": [
        "order"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        }
      }
    },
    "batchMerchantMarketplaceOrders": {
      "x-format": "Message",
      "type": "object",
      "description": "Create or replace orders for one marketplace for one merchant",
      "required": [
        "orders"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "description": "Orders that need to be created or replaced",
          "minItems": 1,
          "maxItems": 1000,
          "items": {
            "$ref": "#/definitions/orderMarketplaceInfo"
          }
        }
      }
    },
    "configureOrderMerchantInfo": {
      "x-format": "Command",
      "type": "object",
      "required": [
        "order",
        "merchantInfo",
        "userId",
        "userEmail",
        "userIPAddress"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "merchantInfo": {
          "$ref": "#/definitions/orderMerchantInfo"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "userEmail": {
          "$ref": "#/definitions/email"
        },
        "userIPAddress": {
          "description": "The IP address who request this operation",
          "type": "string",
          "example": "127.0.0.1"
        }
      }
    },
    "clearOrderMerchantInfo": {
      "x-format": "Command",
      "type": "object",
      "required": [
        "order",
        "userId",
        "userEmail",
        "userIPAddress"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "userEmail": {
          "$ref": "#/definitions/email"
        },
        "userIPAddress": {
          "description": "The IP address who request this operation",
          "type": "string",
          "example": "127.0.0.1"
        }
      }
    },
    "orderChangeCommandBase": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "order",
        "userId",
        "userName",
        "userEmail",
        "userIPAddress",
        "testMode",
        "sourceType",
        "etag"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "userName": {
          "$ref": "#/definitions/orderChangeUserName"
        },
        "userEmail": {
          "$ref": "#/definitions/email"
        },
        "userIPAddress": {
          "description": "The IP address who request this operation",
          "type": "string",
          "example": "127.0.0.1"
        },
        "testMode": {
          "description": "This operation was a test",
          "type": "boolean",
          "example": false
        },
        "sourceType": {
          "$ref": "#/definitions/operationSourceType"
        },
        "etag": {
          "$ref": "#/definitions/orderEtag"
        }
      }
    },
    "acceptOrder": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeCommandBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "userEmail",
            "userIPAddress",
            "testMode",
            "sourceType",
            "etag"
          ],
          "properties": {
            "etag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "refuseOrder": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeCommandBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "userEmail",
            "userIPAddress",
            "testMode",
            "sourceType",
            "etag"
          ],
          "properties": {
            "etag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "shipOrder": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeCommandBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "userEmail",
            "userIPAddress",
            "carrierCode",
            "trackingNumber",
            "testMode",
            "sourceType",
            "etag"
          ],
          "properties": {
            "carrierCode": {
              "$ref": "#/definitions/carrierCode"
            },
            "trackingNumber": {
              "$ref": "#/definitions/trackingNumber"
            },
            "etag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "shipOrderWithTrackingUrl": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeCommandBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "userEmail",
            "userIPAddress",
            "carrierName",
            "trackingNumber",
            "trackingUrl",
            "testMode",
            "sourceType",
            "etag"
          ],
          "properties": {
            "carrierName": {
              "$ref": "#/definitions/carrierName"
            },
            "trackingNumber": {
              "$ref": "#/definitions/trackingNumber"
            },
            "trackingUrl": {
              "$ref": "#/definitions/trackingUrl"
            },
            "etag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "refundOrder": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeCommandBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "userEmail",
            "userIPAddress",
            "refundReason",
            "testMode",
            "sourceType",
            "etag"
          ],
          "properties": {
            "refundReason": {
              "$ref": "#/definitions/refundReason"
            },
            "etag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "cancelOrder": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/orderChangeCommandBase"
        },
        {
          "type": "object",
          "required": [
            "order",
            "userId",
            "userName",
            "userEmail",
            "userIPAddress",
            "cancellationReason",
            "testMode",
            "sourceType",
            "etag"
          ],
          "properties": {
            "cancellationReason": {
              "$ref": "#/definitions/cancellationReason"
            },
            "etag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "abortOrderChange": {
      "x-format": "Command",
      "type": "object",
      "required": [
        "order"
      ],
      "properties": {
        "order": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "userEmail": {
          "$ref": "#/definitions/email"
        },
        "userIPAddress": {
          "description": "The IP address who request this operation",
          "type": "string",
          "example": "127.0.0.1"
        }
      }
    },
    "orderManagementDisabledException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "The merchant '{merchantCode}' has disabled the order management for marketplace '{marketplaceCode}'.\n",
      "type": "object",
      "required": [
        "marketplaceCode",
        "merchantCode"
      ],
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        }
      }
    },
    "orderExceptionsBase": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "marketplaceCode",
        "merchantCode",
        "marketplaceOrderId"
      ],
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "marketplaceOrderId": {
          "$ref": "#/definitions/marketplaceOrderId"
        }
      }
    },
    "duplicateOrderOperationException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "Duplicate operation on the order '{marketplaceOrderId}' has been {duplicateCount} times for the marketplace '{marketplaceCode}' and the merchant '{merchantCode}'.\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderExceptionsBase"
        },
        {
          "type": "object",
          "required": [
            "duplicateCount"
          ],
          "properties": {
            "duplicateCount": {
              "type": "integer",
              "minimum": 2
            }
          }
        }
      ]
    },
    "orderNotFoundException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "The order '{marketplaceOrderId}' is not found for the marketplace '{marketplaceCode}' and the merchant '{merchantCode}'\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderExceptionsBase"
        }
      ]
    },
    "orderInvalidEtagException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "The order change cannot be applied because the '{invalidETag}' does not match the expetected one '{expectedETag}'.\nPlease reload your order and send the latest etag to change the order.\nIf the problem persist please contact our support team.\nMarkeplaceOrderId: '{marketplaceOrderId}'\nMarketplace: '{marketplaceCode}'\nMerchant: '{merchantCode}'\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderExceptionsBase"
        },
        {
          "type": "object",
          "required": [
            "marketplaceCode",
            "merchantCode",
            "marketplaceOrderId",
            "invalidETag",
            "expectedETag"
          ],
          "properties": {
            "invalidETag": {
              "$ref": "#/definitions/orderEtag"
            },
            "expectedETag": {
              "$ref": "#/definitions/orderEtag"
            }
          }
        }
      ]
    },
    "orderChangeInvalidException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "The order change type '{orderChangeType}' cannot be applied because the status of the order is '{imnOrderStatus}.\nIf the problem persist please contact our support team.\nMarketplaceOrderId: '{marketplaceOrderId}'\nMarketplace: '{marketplaceCode}'\nMerchant: '{merchantCode}'\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderExceptionsBase"
        },
        {
          "type": "object",
          "required": [
            "marketplaceCode",
            "merchantCode",
            "marketplaceOrderId",
            "orderChangeType",
            "imnOrderStatus"
          ],
          "properties": {
            "orderChangeType": {
              "$ref": "#/definitions/orderChangeType"
            },
            "imnOrderStatus": {
              "$ref": "#/definitions/imnOrderStatus"
            }
          }
        }
      ]
    },
    "orderChangeNotFoundException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "The order change '{correlationId}' is not found.\nMarketplaceOrderId: '{marketplaceOrderId}'\nMarketplace: '{marketplaceCode}'\nMerchant: '{merchantCode}'\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderExceptionsBase"
        },
        {
          "type": "object",
          "required": [
            "marketplaceCode",
            "merchantCode",
            "marketplaceOrderId",
            "correlationId"
          ],
          "properties": {
            "correlationId": {
              "$ref": "#/definitions/correlationId"
            }
          }
        }
      ]
    },
    "orderChangeAlreadyInProgressException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "There is an order change currently is progress for the '{marketplaceOrderId}' for the marketplace '{marketplaceCode}' and the merchant '{merchantCode}'. |\nCurrent CorrelationId: '{currentCorrelationId}'\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderExceptionsBase"
        },
        {
          "type": "object",
          "required": [
            "marketplaceCode",
            "merchantCode",
            "marketplaceOrderId",
            "currentCorrelationId"
          ],
          "properties": {
            "currentCorrelationId": {
              "$ref": "#/definitions/correlationId"
            }
          }
        }
      ]
    },
    "orderChangeTimeoutException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "The order change '{correlationId}': '{orderChangeType}' has received no response from the marketplace. The operation has timed out.\n",
      "allOf": [
        {
          "$ref": "#/definitions/orderExceptionsBase"
        },
        {
          "type": "object",
          "required": [
            "marketplaceCode",
            "merchantCode",
            "marketplaceOrderId",
            "correlationId",
            "orderChangeType"
          ],
          "properties": {
            "correlationId": {
              "$ref": "#/definitions/correlationId"
            },
            "orderChangeType": {
              "$ref": "#/definitions/orderChangeType"
            }
          }
        }
      ]
    },
    "imnOrderStatus": {
      "type": "string",
      "description": "IMN order status. Unified for all marketplaces.",
      "example": "shipped",
      "x-lov": "imnOrderStatus",
      "enum": [
        "New",
        "Pending",
        "InProgress",
        "Received",
        "Shipped",
        "Cancelled",
        "Closed",
        "AvailableOnStore"
      ]
    },
    "marketplaceOrderStatus": {
      "description": "The marketplace order state",
      "type": "string",
      "example": "In_progress_3"
    },
    "marketplaceOrderId": {
      "description": "The order marketplace identifier",
      "type": "string",
      "example": "CDISCOUNT12345"
    },
    "orderChangeUserName": {
      "type": "string",
      "description": "The name of the user who did the order change"
    },
    "merchantOrderId": {
      "description": "The order merchant identifier",
      "type": "string",
      "example": "MyOrderMerchantId"
    },
    "merchantECommerceSoftwareVersion": {
      "description": "The e-commece software version of the merchant",
      "type": "string",
      "example": "123.0.1"
    },
    "orderDateSearchType": {
      "description": "Indicates on which date you want to make the filter",
      "type": "string",
      "enum": [
        "IMNModification",
        "Purchase",
        "MarketplaceModification"
      ],
      "default": "IMNModification"
    },
    "orderEtag": {
      "description": "ETag value to identify the order.\\\nThis information is required for the operation GetOrder and ChangeOrder.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n",
      "type": "string",
      "example": "\"ca071a4580129f932a03971968ffef69\""
    },
    "orderProcessing": {
      "description": "If true, there is currently a harvest or an order change in progress. Otherwise false.",
      "type": "boolean",
      "example": false
    },
    "orderIdentifier": {
      "type": "object",
      "required": [
        "marketplaceCode",
        "merchantCode",
        "marketplaceOrderId"
      ],
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "marketplaceOrderId": {
          "$ref": "#/definitions/marketplaceOrderId"
        }
      }
    },
    "carrierName": {
      "type": "string",
      "description": "The carrier name related to the shipping",
      "example": "My special carrier name"
    },
    "trackingUrl": {
      "type": "string",
      "description": "The tracking url related to the shipping",
      "example": "https://trackingpackage.com?number=1H01845163783"
    },
    "trackingNumber": {
      "type": "string",
      "description": "The shipper tracking number related to the shipping",
      "example": "1H01845163783"
    },
    "carrierCode": {
      "type": "string",
      "example": "MondialRelay",
      "description": "The carrier code related to the shipping\n* DeutschePost: DeutschePost\n* DHL: DHL\n* GLS: GLS\n* TNT: TNT\n* UPS: UPS\n* DPD: DPD\n* FEDEX: FEDEX\n* 4PX: 4PX\n* Bpost: Bpost\n* ChinaEMSePacket: China EMS (ePacket)\n* ChinaPost: China Post\n* Chronopost: Chronopost\n* CNEExpress: CNE Express\n* ColisPrive: Colis PrivÃ©\n* Colissimo: Colissimo\n* GEODIS: GEODIS\n* LaPosteCourrier: La Poste - Courrier\n* MalaysiaPost: Malaysia Post\n* MondialRelay: Mondial Relay\n* PostNL: PostNL\n* RelaisColis: Relais Colis\n* RoyalMail: Royal Mail\n* SFExpress: SF Express\n* SFCService: SFC Service\n* SingaporePost: Singapore Post\n* USPS: USPS\n* Yanwen: Yanwen\n* AMATI: AMATI\n* BRTID: BRTID\n* BRTRIFMIT: BRTRIFMIT\n* BRTSPED: BRTSPED\n* CORREOS: CORREOS\n* ENERGO: ENERGO\n* FERCAM: FERCAM\n* NEXIVE: NEXIVE\n* ItalianPost: Italian Post\n* SDA: SDA\n* SGTFlyer: SGT Flyer\n* TECNOTRANS: TECNOTRANS\n* Bursped: Bursped\n* Cargoline: Cargoline\n* Computeruniverse: Computeruniverse\n* Dachser: Dachser\n* DHLFreight: DHL Freight\n* dtl: dtl\n* Emons: Emons\n* GEL: GEL\n* Hellmann: Hellmann\n* Hermes: Hermes\n* Hermes2MH: Hermes 2 MH\n* IDSLogistik: IDS Logistik\n* Iloxx: Iloxx\n* KuehneNagel: Kuehne & Nagel\n* Marktanlieferung: Marktanlieferung\n* Rhenus: Rhenus\n* Schenker: Schenker\n* SpeditionGuettler: Spedition Guettler\n",
      "enum": [
        "DeutschePost",
        "DHL",
        "GLS",
        "TNT",
        "UPS",
        "DPD",
        "FEDEX",
        "4PX",
        "Bpost",
        "ChinaEMSePacket",
        "ChinaPost",
        "Chronopost",
        "CNEExpress",
        "ColisPrive",
        "Colissimo",
        "GEODIS",
        "LaPosteCourrier",
        "MalaysiaPost",
        "MondialRelay",
        "PostNL",
        "RelaisColis",
        "RoyalMail",
        "SFExpress",
        "SFCService",
        "SingaporePost",
        "USPS",
        "Yanwen",
        "AMATI",
        "BRTID",
        "BRTRIFMIT",
        "BRTSPED",
        "CORREOS",
        "ENERGO",
        "FERCAM",
        "NEXIVE",
        "ItalianPost",
        "SDA",
        "SGTFlyer",
        "TECNOTRANS",
        "Bursped",
        "Cargoline",
        "Computeruniverse",
        "Dachser",
        "DHLFreight",
        "dtl",
        "Emons",
        "GEL",
        "Hellmann",
        "Hermes",
        "Hermes2MH",
        "IDSLogistik",
        "Iloxx",
        "KuehneNagel",
        "Marktanlieferung",
        "Rhenus",
        "Schenker",
        "SpeditionGuettler"
      ]
    },
    "cancellationReason": {
      "type": "string",
      "description": "The reason why you cancel the order",
      "enum": [
        "WrongPrice",
        "DelayedInventory",
        "WrongProductInfo",
        "BuyerFeedbackTimeout",
        "BuyerAgreement",
        "BuyerCancelled",
        "NoInventory",
        "ShippingAddressUndeliverable",
        "Other"
      ]
    },
    "refundReason": {
      "type": "string",
      "description": "The reason why you refund the order",
      "enum": [
        "BuyerWarrantyOrRetractation",
        "WrongPrice",
        "LateDelivery",
        "IncorrectDelivery",
        "IncompleteDelivery",
        "DamagedDelivery",
        "BuyerFeedbackTimeout",
        "BuyerAgreement",
        "BuyerCancelled",
        "NoInventory",
        "ShippingAddressUndeliverable",
        "Other"
      ]
    },
    "orderItems": {
      "type": "array",
      "description": "The key correspond to the order item identifier. Must be unique.",
      "items": {
        "$ref": "#/definitions/orderItem"
      }
    },
    "orderItem": {
      "description": "Describe an order item.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The order item identifier. Must be unique in the order.",
          "example": "1409211351GV25J-AUC2009994538238-0"
        },
        "title": {
          "description": "The title of the order item",
          "example": "bLA acide-plomb 6v-4.5ah 70x48x106mm",
          "type": "string"
        },
        "condition": {
          "description": "The condition of the order item",
          "example": "new",
          "type": "string"
        },
        "imageUrl": {
          "$ref": "#/definitions/httpUrl",
          "example": "http://blabla.com//das6-45.jpg"
        },
        "merchantOfferSku": {
          "$ref": "#/definitions/sku"
        },
        "gtin": {
          "$ref": "#/definitions/gtin"
        },
        "marketplaceProductId": {
          "description": "The marketplace product identifier of the order item",
          "example": "MarketplaceProductId",
          "type": "string"
        },
        "marketplaceProductUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "itemPrice": {
          "description": "The price of the order item",
          "example": 6.86,
          "type": "number",
          "format": "decimal"
        },
        "itemTax": {
          "description": "The tax of the order item",
          "type": "number",
          "format": "decimal",
          "example": 0.0
        },
        "quantity": {
          "description": "The quantity of the order item",
          "example": 1,
          "type": "number",
          "format": "decimal"
        },
        "shippingPrice": {
          "description": "The shipping price of the order item",
          "type": "number",
          "example": 0.0,
          "format": "decimal"
        },
        "totalPrice": {
          "description": "The total price of the order item",
          "example": 6.86,
          "type": "number",
          "format": "decimal"
        }
      }
    },
    "orderBillingInfo": {
      "type": "object",
      "description": "The billing information related to the order",
      "properties": {
        "customer": {
          "$ref": "#/definitions/orderCustomer"
        },
        "address": {
          "$ref": "#/definitions/postalAddress"
        }
      }
    },
    "orderShippingInfo": {
      "type": "object",
      "description": "The shipping information related to the order",
      "properties": {
        "contact": {
          "$ref": "#/definitions/person"
        },
        "relayId": {
          "description": "The company name of The address for this order",
          "type": "string",
          "example": "My Company"
        },
        "address": {
          "$ref": "#/definitions/postalAddress"
        },
        "price": {
          "description": "The shipping price of this order",
          "type": "number",
          "format": "decimal",
          "example": 6.9
        },
        "method": {
          "description": "The shipping method of this order",
          "type": "string",
          "example": "DPD Domicile"
        },
        "fulfilledBy": {
          "description": "The shipment is fulfilled by",
          "type": "string",
          "example": "Cdiscount Fulfillment"
        },
        "tax": {
          "description": "The shipping tax for this order",
          "type": "number",
          "format": "decimal",
          "example": 0.0
        },
        "earliestShipUtcDate": {
          "description": "The UTC date of the earliest ship for this order",
          "type": "string",
          "example": "2017-04-02T21:30:00Z",
          "format": "date-time"
        },
        "latestShipUtcDate": {
          "description": "The UTC date of the latest ship for this order",
          "type": "string",
          "format": "date-time",
          "example": "2017-04-30T21:30:00Z"
        }
      }
    },
    "orderCustomer": {
      "allOf": [
        {
          "$ref": "#/definitions/person"
        },
        {
          "type": "object",
          "description": "The customer",
          "properties": {
            "customerIdentifier": {
              "description": "The buyer identifier for this order",
              "type": "string",
              "example": "1234567890"
            }
          }
        }
      ]
    },
    "person": {
      "type": "object",
      "properties": {
        "civility": {
          "description": "The civility of the person",
          "type": "string",
          "example": "MRS"
        },
        "firstName": {
          "$ref": "#/definitions/firstName"
        },
        "lastName": {
          "$ref": "#/definitions/lastName"
        },
        "companyName": {
          "type": "string",
          "description": "The company name of the person",
          "example": "App"
        },
        "email": {
          "$ref": "#/definitions/email"
        },
        "phoneNumber": {
          "$ref": "#/definitions/telephoneNumber"
        },
        "mobilePhoneNumber": {
          "$ref": "#/definitions/telephoneNumber"
        }
      }
    },
    "telephoneNumber": {
      "type": "string",
      "description": "The telephone number",
      "example": "+33000000042"
    },
    "postalAddress": {
      "type": "object",
      "properties": {
        "line1": {
          "description": "The address line 1",
          "type": "string",
          "example": "5 rue amÃ©lie"
        },
        "line2": {
          "description": "The address line 2",
          "type": "string",
          "example": "BDR"
        },
        "line3": {
          "description": "The address line 3",
          "type": "string",
          "example": "RDC"
        },
        "comment": {
          "description": "The comment to access to this address",
          "type": "string",
          "example": "The instructions from the buyer"
        },
        "postalCode": {
          "description": "The address postal code",
          "type": "string",
          "example": "13014"
        },
        "city": {
          "description": "The address city",
          "type": "string",
          "example": "Marseille"
        },
        "stateOrRegion": {
          "description": "The address state or region",
          "type": "string",
          "example": "BDR"
        },
        "countryName": {
          "description": "The address country name",
          "type": "string",
          "example": "France"
        },
        "countryIsoCodeAlpha2": {
          "description": "The address country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#/decoding_table for more details)",
          "type": "string",
          "example": "FR"
        }
      }
    },
    "orderGeneralInfo": {
      "type": "object",
      "required": [
        "imnOrderStatus",
        "marketplaceOrderStatus",
        "purchaseUtcDate",
        "marketplaceLastModificationUtcDate"
      ],
      "properties": {
        "imnOrderStatus": {
          "$ref": "#/definitions/imnOrderStatus"
        },
        "marketplaceOrderStatus": {
          "$ref": "#/definitions/marketplaceOrderStatus"
        },
        "purchaseUtcDate": {
          "description": "The purchase date of this order",
          "format": "date-time",
          "type": "string",
          "example": "2017-03-31T21:30:23Z"
        },
        "marketplaceLastModificationUtcDate": {
          "description": "The last modification UTC date done by the marketplace on this order",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-16T10:25:23Z"
        },
        "marketplaceChannel": {
          "description": "Useful to identify the origin of the order. For example in Cdiscount.",
          "type": "string",
          "example": "Cdiscount France"
        },
        "comment": {
          "description": "The comment associated to this order",
          "type": "string",
          "example": "This is a comment"
        }
      }
    },
    "orderMarketplaceInfo": {
      "description": "Describe the basic information related to an order.",
      "type": "object",
      "required": [
        "identifier",
        "generalInfo",
        "pricingInfo",
        "billingInfo",
        "shippingInfo",
        "orderItems"
      ],
      "properties": {
        "identifier": {
          "$ref": "#/definitions/orderIdentifier"
        },
        "generalInfo": {
          "$ref": "#/definitions/orderGeneralInfo"
        },
        "pricingInfo": {
          "$ref": "#/definitions/orderPricingInfo"
        },
        "billingInfo": {
          "$ref": "#/definitions/orderBillingInfo"
        },
        "shippingInfo": {
          "$ref": "#/definitions/orderShippingInfo"
        },
        "orderItems": {
          "$ref": "#/definitions/orderItems"
        }
      }
    },
    "orderPricingInfo": {
      "type": "object",
      "required": [
        "totalPrice",
        "currencyCode"
      ],
      "properties": {
        "totalPrice": {
          "description": "The total price of this order (corresponding to the amount paid by the customer)",
          "format": "decimal",
          "type": "number",
          "example": 101.42
        },
        "currencyCode": {
          "$ref": "#/definitions/currencyCode"
        },
        "totalTax": {
          "description": "The total tax of this order",
          "type": "number",
          "format": "decimal",
          "example": 0.0
        },
        "totalCommission": {
          "description": "The total commission of this order",
          "type": "number",
          "format": "decimal",
          "example": 0.0
        },
        "additionalFee": {
          "description": "Additional fee related to this order",
          "type": "number",
          "format": "decimal",
          "example": 10.0
        },
        "paymentMethod": {
          "description": "The payment method of this order",
          "type": "string",
          "example": "1 / 1X"
        },
        "payingUtcDate": {
          "description": "The UTC date of the payment of this order",
          "type": "string",
          "format": "date-time",
          "example": "2017-04-01T13:22:01Z"
        }
      }
    },
    "orderMerchantInfo": {
      "type": "object",
      "description": "The information that concerns the merchant for this order",
      "required": [
        "merchantOrderId",
        "merchantECommerceSoftwareName",
        "merchantECommerceSoftwareVersion"
      ],
      "properties": {
        "merchantOrderId": {
          "$ref": "#/definitions/merchantOrderId"
        },
        "merchantECommerceSoftwareName": {
          "$ref": "#/definitions/ecommerceSoftwareName"
        },
        "merchantECommerceSoftwareVersion": {
          "$ref": "#/definitions/merchantECommerceSoftwareVersion"
        }
      }
    },
    "orderInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/orderMarketplaceInfo"
        },
        {
          "type": "object",
          "description": "Describe in details all informations related to an order.",
          "required": [
            "identifier",
            "generalInfo",
            "pricingInfo",
            "billingInfo",
            "shippingInfo",
            "orderItems",
            "imnInfo"
          ],
          "properties": {
            "merchantInfo": {
              "$ref": "#/definitions/orderMerchantInfo"
            },
            "imnInfo": {
              "$ref": "#/definitions/orderIMNInfo"
            }
          }
        }
      ]
    },
    "orderIMNInfo": {
      "type": "object",
      "description": "The current order change correlation identifier indicates you if there is a pending order change on the marketplace side.",
      "required": [
        "etag",
        "imnLastModificationUtcDate"
      ],
      "properties": {
        "etag": {
          "$ref": "#/definitions/orderEtag"
        },
        "imnLastModificationUtcDate": {
          "description": "The last modification UTC date done by IMN of this order",
          "format": "date-time",
          "type": "string",
          "example": "2017-04-16T10:30:23Z"
        },
        "currentOrderChangeCorrelationId": {
          "$ref": "#/definitions/correlationId"
        }
      }
    },
    "orderChangeType": {
      "type": "string",
      "x-lov": "OrderChangeBusinessOperationType",
      "example": "ship",
      "enum": [
        "Accept",
        "Refuse",
        "Ship",
        "ShipWithTrackingUrl",
        "Refund",
        "Cancel",
        "PickUp",
        "Restock"
      ]
    },
    "beezUPMerchantOffer": {
      "allOf": [
        {
          "$ref": "#/definitions/merchantOffer"
        },
        {
          "$ref": "#/definitions/beezUPMarketplaceAccountIdentifier"
        }
      ]
    },
    "beezUPMerchantOfferIdentifier": {
      "allOf": [
        {
          "$ref": "#/definitions/merchantOfferIdentifier"
        },
        {
          "$ref": "#/definitions/beezUPMarketplaceAccountIdentifier"
        }
      ]
    },
    "merchantOfferEventBase": {
      "x-exclude": true,
      "allOf": [
        {
          "$ref": "#/definitions/merchantOffer"
        }
      ]
    },
    "merchantOfferReceived": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantOfferEventBase"
        }
      ]
    },
    "merchantOfferDeleted": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantOfferIdentifier"
        }
      ]
    },
    "merchantOfferUnpublished": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantOfferIdentifier"
        },
        {
          "type": "object",
          "required": [
            "reason"
          ],
          "properties": {
            "reason": {
              "$ref": "#/definitions/merchantOfferUnpublicationReasonCode"
            }
          }
        }
      ]
    },
    "merchantOfferNotImported": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantOfferIdentifier"
        },
        {
          "type": "object",
          "properties": {
            "reasons": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/merchantOfferNoneImportationReason"
              }
            }
          }
        }
      ]
    },
    "duplicateMerchantOfferOperationException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "Duplicate operation on an offer has been {duplicateCount} times for the merchant '{merchantCode}':\n- sku: '{sku}' \n",
      "type": "object",
      "required": [
        "merchantCode",
        "sku",
        "duplicateCount"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "sku": {
          "$ref": "#/definitions/sku"
        },
        "duplicateCount": {
          "type": "integer",
          "minimum": 2
        }
      }
    },
    "duplicateMerchantMarketplaceOfferOperationException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "description": "Duplicate operation on an offer has been {duplicateCount} times for the marketplace '{marketplaceCode}' and the merchant '{merchantCode}':\n- sku: '{sku}' \n- gtin: '{gtin}'\n- itemCondition: '{itemCondition}' \n- fulfilledBy: '{fulfilledBy}'\n",
      "type": "object",
      "required": [
        "marketplaceCode",
        "merchantCode",
        "sku",
        "duplicateCount"
      ],
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "sku": {
          "$ref": "#/definitions/sku"
        },
        "duplicateCount": {
          "type": "integer",
          "minimum": 2
        }
      }
    },
    "batchMerchantOfferChanges": {
      "x-format": "Message",
      "type": "object",
      "description": "Contains all changes for a merchant",
      "properties": {
        "offers": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1000,
          "description": "Offers that need to be created or replaced",
          "items": {
            "$ref": "#/definitions/merchantOffer"
          }
        },
        "deleted": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1000,
          "description": "Deleted offers",
          "items": {
            "$ref": "#/definitions/merchantOfferIdentifier"
          }
        },
        "unpublished": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1000,
          "description": "Unpublished offers",
          "items": {
            "$ref": "#/definitions/merchantOfferIdentifier"
          }
        }
      }
    },
    "price": {
      "x-exclude": true,
      "type": "number",
      "format": "decimal",
      "description": "The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes. http://schema.org/price"
    },
    "priceCurrency": {
      "type": "string",
      "description": "The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.\nUsage guidelines:\nUse the priceCurrency property (with ISO 4217 codes e.g. USD) instead of including ambiguous symbols such as $ in the value. http://schema.org/priceCurrency\n"
    },
    "validFrom": {
      "type": "string",
      "format": "date-time",
      "description": "The date when the item becomes valid. http://schema.org/validFrom"
    },
    "validThrough": {
      "type": "string",
      "format": "date-time",
      "description": "The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours. http://schema.org/validThrough"
    },
    "priceSpecification": {
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/price"
        },
        "validFrom": {
          "$ref": "#/definitions/validFrom"
        },
        "validThrough": {
          "$ref": "#/definitions/validThrough"
        }
      }
    },
    "minPrice": {
      "type": "number",
      "format": "decimal",
      "description": "The lowest price if the price is a range. http://schema.org/minPrice"
    },
    "deliveryLeadTime": {
      "type": "number",
      "format": "int16",
      "description": "The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup. http://schema.org/deliveryLeadTime"
    },
    "inventoryLevel": {
      "type": "number",
      "format": "decimal",
      "description": "The current approximate inventory level for the item or items. http://schema.org/inventoryLevel"
    },
    "fulfilledBy": {
      "type": "string",
      "description": "The marketplace in charge of the delivery on this offer."
    },
    "itemCondition": {
      "type": "string",
      "enum": [
        "NewCondition",
        "RefurbishedCondition",
        "UsedAsNewCondition",
        "UsedVeryGoodCondition",
        "UsedGoodCondition",
        "UsedAcceptableCondition"
      ]
    },
    "merchantOfferIdentifier": {
      "type": "object",
      "required": [
        "merchantCode",
        "sku"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "sku": {
          "$ref": "#/definitions/sku"
        }
      }
    },
    "merchantOfferList": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "merchantOffers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/merchantOffer"
              }
            }
          }
        }
      ]
    },
    "merchantOffer": {
      "allOf": [
        {
          "$ref": "#/definitions/merchantOfferIdentifier"
        },
        {
          "type": "object",
          "description": "The defaultDeliveryMethod is required if the deliverySpecifications is fulfilled",
          "required": [
            "merchantCode",
            "sku",
            "gtin",
            "itemCondition",
            "price",
            "priceCurrency",
            "deliveryLeadTime",
            "inventoryLevel",
            "lastUpdateUtcDate"
          ],
          "properties": {
            "gtin": {
              "$ref": "#/definitions/gtin"
            },
            "itemCondition": {
              "$ref": "#/definitions/itemCondition"
            },
            "fulfilledBy": {
              "$ref": "#/definitions/fulfilledBy"
            },
            "price": {
              "$ref": "#/definitions/price"
            },
            "priceCurrency": {
              "$ref": "#/definitions/priceCurrency"
            },
            "minPrice": {
              "$ref": "#/definitions/minPrice"
            },
            "discount": {
              "$ref": "#/definitions/priceSpecification"
            },
            "deliveryLeadTime": {
              "$ref": "#/definitions/deliveryLeadTime"
            },
            "inventoryLevel": {
              "$ref": "#/definitions/inventoryLevel"
            },
            "defaultDeliveryMethod": {
              "$ref": "#/definitions/deliveryMethod"
            },
            "deliverySpecifications": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/deliverySpecification"
              }
            },
            "lastUpdateUtcDate": {
              "type": "string",
              "format": "date-time",
              "example": "2018-02-24T14:24:35"
            },
            "sourceMarketplaceCode": {
              "$ref": "#/definitions/marketplaceCode"
            }
          }
        }
      ]
    },
    "transportTime": {
      "type": "number",
      "format": "int16",
      "description": "To compute the shipping time, we sometimes ask for the typical delay from the moment the goods are either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup. http://schema.org/deliveryLeadTime\n"
    },
    "deliverySpecification": {
      "type": "object",
      "required": [
        "deliveryMethod",
        "price"
      ],
      "properties": {
        "deliveryMethod": {
          "$ref": "#/definitions/deliveryMethod"
        },
        "price": {
          "$ref": "#/definitions/price"
        },
        "additionalPrice": {
          "$ref": "#/definitions/price"
        }
      }
    },
    "merchantOfferNoneImportationReasonCode": {
      "type": "string",
      "description": "A reason code related to a none importation of the offer",
      "enum": [
        "InvalidEAN",
        "InvariantNotAppliable"
      ]
    },
    "merchantOfferNoneImportationReason": {
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/merchantOfferNoneImportationReasonCode"
        },
        "error": {
          "$ref": "#/definitions/userErrorMessage"
        },
        "propertyName": {
          "type": "string",
          "description": "The related property name causing the none importation of the offer"
        },
        "actualValue": {
          "type": "string",
          "description": "The actual value causing the none importation of the offer"
        }
      }
    },
    "merchantOfferUnpublicationReasonCode": {
      "type": "string",
      "description": "The reason of the unpublication of an offer",
      "enum": [
        "MerchantMarketplaceOfferPublicationDisabled",
        "Excluded",
        "OfferDisabled"
      ]
    },
    "merchantEventPushed": {
      "x-exclude": true,
      "type": "object",
      "discriminator": "eventType",
      "required": [
        "merchantCode"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "eventType": {
          "x-exclude": true,
          "type": "string"
        }
      }
    },
    "merchantCreated": {
      "x-format": "Event",
      "type": "object",
      "description": "When the merchant creates his account on IMN",
      "required": [
        "merchantCode",
        "userId",
        "email"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "email": {
          "$ref": "#/definitions/email"
        },
        "userIPAddress": {
          "type": "string"
        }
      }
    },
    "merchantAcountInfoUpdated": {
      "x-format": "Event",
      "description": "When the merchant updates his account information",
      "type": "object",
      "required": [
        "merchantCode",
        "userId",
        "companyName",
        "lastName",
        "firstName",
        "country",
        "phoneNumber",
        "currencyCode"
      ],
      "properties": {
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "userEmail": {
          "$ref": "#/definitions/email"
        },
        "userIPAddress": {
          "type": "string"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "companyName": {
          "$ref": "#/definitions/merchantCompanyName"
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/countryIsoCodeAlpha3"
        },
        "phoneNumber": {
          "type": "string"
        },
        "imageUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "currencyCode": {
          "$ref": "#/definitions/currencyCode"
        },
        "ecommerceSoftwareName": {
          "$ref": "#/definitions/ecommerceSoftwareName"
        }
      }
    },
    "merchantMarketplaceEventBase": {
      "x-exclude": true,
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "type": "object",
          "required": [
            "marketplaceCode"
          ],
          "properties": {
            "marketplaceCode": {
              "$ref": "#/definitions/marketplaceCode"
            }
          }
        }
      ]
    },
    "merchantMarketplaceCredentialConfigured": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "credential"
          ],
          "properties": {
            "credential": {
              "$ref": "#/definitions/marketplaceApiCredential"
            },
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "merchantMarketplaceCredentialExpired": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "marketplaceCode",
            "credential"
          ],
          "properties": {
            "credential": {
              "$ref": "#/definitions/marketplaceApiCredential"
            },
            "checkCount": {
              "type": "integer"
            }
          }
        }
      ]
    },
    "merchantMarketplaceSubscriptionRequested": {
      "x-format": "Event",
      "description": "When the merchant marketplace subscription has been requested",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            },
            "externalId": {
              "type": "string",
              "description": "If the request is coming from an external system we will keep the identifier"
            }
          }
        }
      ]
    },
    "merchantMarketplaceSubscriptionAccepted": {
      "x-format": "Event",
      "description": "When the marketplace accept the mechant subscription request",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "merchantMarketplaceSubscriptionRefused": {
      "x-format": "Event",
      "description": "When the marketplace refuses the merchant subscription",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "reason"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            },
            "reason": {
              "$ref": "#/definitions/merchantMarketplaceSubscriptionRefusalReason"
            }
          }
        }
      ]
    },
    "merchantMarketplaceSubscriptionBlocked": {
      "x-format": "Event",
      "description": "When the marketplace blocks the merchant subscription",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "reason"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            },
            "reason": {
              "$ref": "#/definitions/merchantMarketplaceSubscriptionRefusalReason"
            }
          }
        }
      ]
    },
    "merchantOffersSourceMarketplaceDeclared": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "merchantOffersSourceMarketplaceUndeclared": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "merchantMarketplaceOfferImportationEnabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "merchantMarketplaceOfferImportationDisabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "merchantMarketplaceOfferPublicationEnabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "merchantMarketplaceOfferPublicationDisabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "merchantMarketplaceOrderImportationEnabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "merchantMarketplaceOrderImportationDisabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "externalMerchantMarketplaceSubscriptionsRequested": {
      "x-format": "Event",
      "type": "object",
      "description": "When the merchant marketplace subscription has been requested",
      "required": [
        "merchantCode",
        "userId",
        "sourceMarketplaceCode",
        "targetMarketplacesSubscriptionRequested",
        "subscriptionRequestUtcDate",
        "salesforceSubscriptionId"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "userEmail": {
          "$ref": "#/definitions/email"
        },
        "userIPAddress": {
          "type": "string"
        },
        "sourceMarketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "targetMarketplacesSubscriptionRequested": {
          "type": "array",
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/marketplaceCode"
          }
        },
        "subscriptionRequestUtcDate": {
          "type": "string",
          "format": "date-time",
          "description": "The exact date time of the subscription request"
        },
        "salesforceSubscriptionId": {
          "type": "string",
          "description": "The Salesforce identifier of the subscription",
          "example": "BLA0O00001v8aNuQAI"
        }
      }
    },
    "merchantMarketplacePricingSettingConfigured": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "ruleType"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            },
            "ruleType": {
              "$ref": "#/definitions/marketplacePricingRuleType"
            },
            "value": {
              "$ref": "#/definitions/marketplacePricingValue"
            }
          }
        }
      ]
    },
    "merchantMarketplaceShippingPreparationSettingConfigured": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "ruleType"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            },
            "ruleType": {
              "$ref": "#/definitions/marketplacePreparationRuleType"
            },
            "delay": {
              "type": "integer",
              "format": "int32",
              "description": "The delay considering the rule"
            }
          }
        }
      ]
    },
    "merchantMarketplaceShippingDeliverySettingConfigured": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "deliveryMethod",
            "ruleType"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            },
            "deliveryMethod": {
              "$ref": "#/definitions/deliveryMethod"
            },
            "ruleType": {
              "$ref": "#/definitions/marketplaceShippingChargeRuleType"
            },
            "charge": {
              "type": "number",
              "example": 3.35,
              "description": "The charge for this delivery mode considering the rule"
            },
            "additionalCharge": {
              "type": "number",
              "example": 1.52,
              "description": "The additional charge for this delivery mode"
            }
          }
        }
      ]
    },
    "merchantMarketplaceShippingDeliverySettingDisabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "merchantMarketplaceShippingDeliverySettingDeleted": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "marketplaceCode",
            "userId",
            "deliveryMethod"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            },
            "deliveryMethod": {
              "$ref": "#/definitions/deliveryMethod"
            }
          }
        }
      ]
    },
    "merchantMarketplaceShippingDeliverySettingEnabled": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "marketplaceMerchantCodeConfigured": {
      "x-format": "Event",
      "allOf": [
        {
          "$ref": "#/definitions/merchantEventPushed"
        },
        {
          "$ref": "#/definitions/merchantMarketplaceEventBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "marketplaceCode",
            "marketplaceMerchantCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            },
            "marketplaceMerchantCode": {
              "$ref": "#/definitions/marketplaceMerchantCode"
            }
          }
        }
      ]
    },
    "createMerchant": {
      "x-format": "Command",
      "description": "When the merchant creates his account on IMN",
      "type": "object",
      "required": [
        "merchantCode",
        "userId",
        "companyName",
        "email",
        "lastName",
        "firstName",
        "country",
        "phoneNumber",
        "currencyCode",
        "ecommerceSoftwareName",
        "userIPAddress"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "companyName": {
          "$ref": "#/definitions/merchantCompanyName"
        },
        "email": {
          "$ref": "#/definitions/email"
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/countryIsoCodeAlpha3"
        },
        "phoneNumber": {
          "type": "string"
        },
        "imageUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "currencyCode": {
          "$ref": "#/definitions/currencyCode"
        },
        "ecommerceSoftwareName": {
          "$ref": "#/definitions/ecommerceSoftwareName"
        },
        "userIPAddress": {
          "type": "string"
        }
      }
    },
    "updateMerchantAcountInfo": {
      "x-format": "Command",
      "description": "When the merchant updates his account information",
      "type": "object",
      "required": [
        "merchantCode",
        "userId",
        "userEmail",
        "userIPAddress",
        "companyName",
        "lastName",
        "firstName",
        "country",
        "phoneNumber",
        "currencyCode",
        "ecommerceSoftwareName"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "userId": {
          "$ref": "#/definitions/userId"
        },
        "userEmail": {
          "$ref": "#/definitions/email"
        },
        "userIPAddress": {
          "type": "string"
        },
        "companyName": {
          "$ref": "#/definitions/merchantCompanyName"
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/countryIsoCodeAlpha3"
        },
        "phoneNumber": {
          "type": "string"
        },
        "imageUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "currencyCode": {
          "$ref": "#/definitions/currencyCode"
        },
        "ecommerceSoftwareName": {
          "$ref": "#/definitions/ecommerceSoftwareName"
        }
      }
    },
    "declareMerchantOffersSourceMarketplace": {
      "x-format": "Command",
      "description": "When the merchant wants to declare this marketplace as offers's source",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "undeclareMerchantOffersSourceMarketplace": {
      "x-format": "Command",
      "description": "When the merchant wants to undeclare this marketplace as offers's source",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "acceptMerchantMarketplaceSubscription": {
      "x-format": "Command",
      "description": "When the marketplace configures credential and accepts the merchant subscription",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "refuseMerchantMarketplaceSubscription": {
      "x-format": "Command",
      "description": "When the marketplace refuses the merchant subscription",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode",
            "reason"
          ],
          "properties": {
            "reason": {
              "$ref": "#/definitions/merchantMarketplaceSubscriptionRefusalReason"
            },
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "blockMerchantMarketplaceSubscription": {
      "x-format": "Command",
      "description": "When the marketplace blocks the merchant subscription",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode",
            "reason"
          ],
          "properties": {
            "reason": {
              "$ref": "#/definitions/merchantMarketplaceSubscriptionRefusalReason"
            },
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "configureMerchantMarketplaceCredential": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode",
            "credential"
          ],
          "properties": {
            "credential": {
              "$ref": "#/definitions/marketplaceApiCredential"
            },
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "enableMerchantMarketplace": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "disableMerchantMarketplace": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "reenableMerchantMarketplaceOrderImportation": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "disableMerchantMarketplaceOrderImportation": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "reenableMerchantMarketplaceOfferImportation": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "disableMerchantMarketplaceOfferImportation": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            }
          }
        }
      ]
    },
    "configureMarketplacePricingSetting": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode",
            "pricingSetting"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            },
            "pricingSetting": {
              "$ref": "#/definitions/marketplacePricingSetting"
            }
          }
        }
      ]
    },
    "configureMarketplaceShippingSettings": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode",
            "shippingSettings"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            },
            "shippingSettings": {
              "$ref": "#/definitions/marketplaceShippingSettings"
            }
          }
        }
      ]
    },
    "disableMarketplaceShippingDeliverySettings": {
      "x-format": "Command",
      "description": "Not for the MVP",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "marketplaceCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "deliveryMethod"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            },
            "deliveryMethod": {
              "$ref": "#/definitions/deliveryMethod"
            }
          }
        }
      ]
    },
    "reenableMarketplaceShippingDeliverySettings": {
      "x-format": "Command",
      "description": "Not for the MVP",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "marketplaceCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "deliveryMethod"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            },
            "deliveryMethod": {
              "$ref": "#/definitions/deliveryMethod"
            }
          }
        }
      ]
    },
    "configureMarketplaceMerchantCode": {
      "x-format": "Command",
      "allOf": [
        {
          "$ref": "#/definitions/merchantMarketplaceBase"
        },
        {
          "type": "object",
          "required": [
            "merchantCode",
            "userId",
            "userEmail",
            "userIPAddress",
            "marketplaceCode",
            "marketplaceMerchantCode"
          ],
          "properties": {
            "userId": {
              "$ref": "#/definitions/userId"
            },
            "userEmail": {
              "$ref": "#/definitions/email"
            },
            "userIPAddress": {
              "type": "string"
            },
            "marketplaceMerchantCode": {
              "$ref": "#/definitions/marketplaceMerchantCode"
            }
          }
        }
      ]
    },
    "merchantCodeAlreadyUsedException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "merchantCode"
      ],
      "description": "The merchant code '{merchantCode}' already exists\n",
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        }
      }
    },
    "invalidMarketplaceCredentialException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "marketplaceApiCredential"
      ],
      "description": "Marketplace credentials are not recognized, please check them and try again\n",
      "properties": {
        "marketplaceApiCredential": {
          "$ref": "#/definitions/marketplaceApiCredential"
        }
      }
    },
    "subscriptionNotAcceptedException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "marketplaceCode"
      ],
      "description": "The subscription has not yet been accepted by the marketplace '{marketplaceCode}'\n",
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        }
      }
    },
    "notOfferSourceMarketplaceException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "marketplaceCode"
      ],
      "description": "The marketplace '{marketplaceCode}' is not the offer source\n",
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        }
      }
    },
    "credentialNotConfiguredException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "marketplaceCode"
      ],
      "description": "The credential are not configured for the marketplace '{marketplaceCode}'\n",
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        }
      }
    },
    "partnerHttpException": {
      "x-exclude": true,
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": true,
      "type": "object",
      "required": [
        "correlationId",
        "marketplaceCode",
        "merchantCode",
        "logUri",
        "httpStatus",
        "operationName"
      ],
      "description": "The partner http request is in error\n",
      "properties": {
        "correlationId": {
          "$ref": "#/definitions/correlationId"
        },
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "logUri": {
          "type": "string",
          "format": "uri"
        },
        "httpStatus": {
          "type": "string",
          "format": "httpStatusCode"
        },
        "operationName": {
          "type": "string"
        }
      }
    },
    "partnerInvalidResponse": {
      "x-exclude": true,
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": true,
      "type": "object",
      "required": [
        "correlationId",
        "marketplaceCode",
        "merchantCode",
        "exceptionMessage",
        "operationName"
      ],
      "description": "The partner http response is invalid\n",
      "properties": {
        "correlationId": {
          "$ref": "#/definitions/correlationId"
        },
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "exceptionMessage": {
          "type": "string"
        },
        "operationName": {
          "type": "string"
        }
      }
    },
    "invalidOperationOnDeclaredMerchantOffersSourceMarketplaceException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "merchantCode",
        "sourceMarketplaceCode",
        "operationName"
      ],
      "description": "The operation '{operationName}' is invalid on a offers source marketplace.\n",
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "sourceMarketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "operationName": {
          "type": "string"
        }
      }
    },
    "dependencyProjectionException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": true,
      "type": "object",
      "required": [
        "merchantCode",
        "projectionType",
        "projectionMessageId",
        "currentMessageId"
      ],
      "description": "Projection '{projectionType}' ('{projectionMessageId}') failed for merchantCode '{merchantCode}'. Current messageId is '{currentMessageId}'\n",
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "projectionType": {
          "type": "string"
        },
        "projectionMessageId": {
          "$ref": "#/definitions/messageId"
        },
        "currentMessageId": {
          "$ref": "#/definitions/messageId"
        }
      }
    },
    "marketplaceSubscriptionStatus": {
      "description": "The subscription status",
      "type": "string",
      "enum": [
        "notRequested",
        "requested",
        "accepted",
        "declined",
        "blocked"
      ],
      "example": "accepted"
    },
    "merchantMarketplaceSubscriptionRefusalReason": {
      "type": "string",
      "minLength": 5,
      "x-minLength": 5,
      "maxLength": 4000,
      "x-maxLength": 4000,
      "description": "The marketplace reason for the subscription's refusal"
    },
    "merchantCompanyName": {
      "type": "string",
      "minLength": 2,
      "x-minLength": 2,
      "maxLength": 100,
      "x-maxLength": 100,
      "description": "Merchant's company name"
    },
    "marketplaceCredentialStatus": {
      "description": "The marketplace credential status",
      "type": "string",
      "enum": [
        "notConfigured",
        "configured",
        "expired"
      ],
      "example": "configured"
    },
    "marketplaceShippingSettingsStatus": {
      "description": "The marketplace shipping settings status",
      "type": "string",
      "enum": [
        "notConfigured",
        "configured"
      ]
    },
    "marketplacePreparationRuleType": {
      "type": "string",
      "enum": [
        "Increase",
        "Decrease",
        "Same",
        "Fixed"
      ],
      "default": "Same",
      "example": "Same"
    },
    "marketplacePreparationSetting": {
      "type": "object",
      "required": [
        "ruleType"
      ],
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/marketplacePreparationRuleType"
        },
        "delay": {
          "type": "integer",
          "format": "int32",
          "description": "The delay considering the rule"
        }
      }
    },
    "marketplaceShippingSettings": {
      "type": "object",
      "required": [
        "preparationSetting",
        "deliverySettings"
      ],
      "properties": {
        "preparationSetting": {
          "$ref": "#/definitions/marketplacePreparationSetting"
        },
        "deliverySettings": {
          "$ref": "#/definitions/marketplaceDeliverySettingList"
        }
      }
    },
    "marketplaceDeliverySettingList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/marketplaceDeliverySetting"
      }
    },
    "marketplaceDeliverySetting": {
      "type": "object",
      "required": [
        "deliveryMethod",
        "ruleType"
      ],
      "properties": {
        "deliveryMethod": {
          "$ref": "#/definitions/deliveryMethod"
        },
        "ruleType": {
          "$ref": "#/definitions/marketplaceShippingChargeRuleType"
        },
        "charge": {
          "type": "number",
          "example": 3.35,
          "description": "The charge for this delivery mode considering the rule"
        },
        "additionalCharge": {
          "type": "number",
          "example": 1.52,
          "description": "The additional charge for this delivery mode"
        }
      }
    },
    "marketplacePricingValue": {
      "type": "number",
      "pattern": "^([0-9]{1,13}[.]*[0-9]{0,6})$",
      "x-pattern": "^([0-9]{1,13}[.]*[0-9]{0,6})$",
      "example": 42.01
    },
    "marketplacePricingSetting": {
      "type": "object",
      "required": [
        "ruleType"
      ],
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/marketplacePricingRuleType"
        },
        "value": {
          "$ref": "#/definitions/marketplacePricingValue"
        }
      }
    },
    "marketplacePricingRuleOperationType": {
      "type": "string",
      "enum": [
        "plus",
        "minus"
      ],
      "example": "plus"
    },
    "marketplacePricingRuleUnit": {
      "type": "string",
      "enum": [
        "percent",
        "amount"
      ],
      "example": "percent"
    },
    "marketplacePricingRuleType": {
      "type": "string",
      "default": "Same",
      "enum": [
        "PercentIncrease",
        "PercentDecrease",
        "AmountIncrease",
        "AmountDecrease",
        "Same"
      ]
    },
    "marketplaceShippingChargeRuleType": {
      "type": "string",
      "default": "Same",
      "enum": [
        "PercentIncrease",
        "PercentDecrease",
        "AmountIncrease",
        "AmountDecrease",
        "Same",
        "Fixed"
      ]
    },
    "marketplaceInfo": {
      "type": "object",
      "required": [
        "code",
        "name",
        "sellerBackOfficeUrl",
        "sellerBackOfficeCredentialPageUrl",
        "imageUrl",
        "subscriptionStatus",
        "credentialStatus",
        "shippingSettingsStatus",
        "source"
      ],
      "properties": {
        "code": {
          "$ref": "#/definitions/marketplaceCode"
        },
        "name": {
          "type": "string",
          "description": "The name of the marketplace",
          "example": "Cdiscount"
        },
        "sellerBackOfficeUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "sellerBackOfficeCredentialPageUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "imageUrl": {
          "$ref": "#/definitions/httpUrl"
        },
        "subscriptionStatus": {
          "$ref": "#/definitions/marketplaceSubscriptionStatus"
        },
        "credentialStatus": {
          "$ref": "#/definitions/marketplaceCredentialStatus"
        },
        "shippingSettingsStatus": {
          "$ref": "#/definitions/marketplaceShippingSettingsStatus"
        },
        "source": {
          "type": "boolean",
          "description": "If true, this marketplace is the source of offers",
          "default": false,
          "example": false
        }
      }
    },
    "marketplaceSubscriptionReporting": {
      "type": "object",
      "required": [
        "status",
        "messages"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/marketplaceSubscriptionStatus"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/marketplaceSubscriptionMessage"
          }
        }
      }
    },
    "marketplaceSubscriptionMessage": {
      "type": "object",
      "required": [
        "senderType",
        "utcDate",
        "status"
      ],
      "properties": {
        "senderType": {
          "$ref": "#/definitions/marketplaceSubscriptionMessageSenderType"
        },
        "utcDate": {
          "type": "string",
          "format": "date-time",
          "example": "2009-06-15T13:45:30Z"
        },
        "status": {
          "$ref": "#/definitions/marketplaceSubscriptionStatus"
        },
        "message": {
          "type": "string",
          "example": "Wrong shoes!"
        }
      }
    },
    "marketplaceSubscriptionMessageSenderType": {
      "type": "string",
      "enum": [
        "merchant",
        "marketplace"
      ],
      "example": "marketplace"
    },
    "marketplaceOfferPublicationStatus": {
      "description": "The Offer Importation status",
      "type": "string",
      "enum": [
        "disabled",
        "enabled"
      ],
      "example": "enabled"
    },
    "merchantEvents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/merchantEvent"
      }
    },
    "merchantEvent": {
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "eventContent": {
          "type": "object"
        }
      }
    },
    "marketplaceApiIntegrationStatus": {
      "type": "string",
      "enum": [
        "Up",
        "Down",
        "Paused"
      ]
    },
    "marketplaceStatus": {
      "type": "string",
      "description": "Indicate the status of the marketplace",
      "enum": [
        "PROD",
        "TEST"
      ]
    },
    "beezUPExecutionId": {
      "description": "The execution identifier",
      "type": "string"
    },
    "beezUPChannelId": {
      "type": "string",
      "format": "guid",
      "description": "The channel identifier",
      "example": "2dc136a7-0d3d-4cc9-a825-a28a42c53e28"
    },
    "beezUPChannelCatalogId": {
      "type": "string",
      "format": "guid",
      "description": "The channel catalog identifier",
      "example": "6d6b04de-406b-4539-8e7e-bf3e8da5dfb0"
    },
    "beezUPMarketplaceTechnicalCode": {
      "description": "The technical code of the marketplace",
      "type": "string",
      "example": "CDiscount",
      "x-lov": "OMMarketplaceTechnicalCode"
    },
    "beezUPMarketplaceAccountId": {
      "description": "The marketplace account identifier in BeezUP. This account identifier is based on your api settings.",
      "type": "integer",
      "format": "int32",
      "example": 1234
    },
    "beezUPMarketplaceAccountIdentifier": {
      "type": "object",
      "required": [
        "channelId",
        "channelCatalogId",
        "accountId"
      ],
      "properties": {
        "channelId": {
          "$ref": "#/definitions/beezUPChannelId"
        },
        "channelCatalogId": {
          "$ref": "#/definitions/beezUPChannelCatalogId"
        },
        "accountId": {
          "$ref": "#/definitions/beezUPMarketplaceAccountId"
        }
      }
    },
    "marketplaceCodeNotFoundException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "marketplaceCode"
      ],
      "description": "The marketplace code '{marketplaceCode}' does not exist\n",
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        }
      }
    },
    "merchantCodeNotFoundException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "merchantCode"
      ],
      "description": "The merchant code '{merchantCode}' does not exist\n",
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        }
      }
    },
    "invalidMarketplaceCodeException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "marketplaceCode"
      ],
      "description": "The merketplace code '{marketplaceCode}' is different from the state\n",
      "properties": {
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        }
      }
    },
    "invalidMerchantCodeException": {
      "x-format": "Exception",
      "x-transient": false,
      "x-technical": false,
      "type": "object",
      "required": [
        "merchantCode"
      ],
      "description": "The merchant code '{merchantCode}' is different from the state\n",
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        }
      }
    },
    "deliveryMethod": {
      "type": "string",
      "description": "A delivery method is a standardized procedure for transferring the product or service to the destination of fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by the organization or group that is the contracting party for the sending organization or person."
    },
    "ecommerceSoftwareName": {
      "description": "The e-commerce software name of the merchant",
      "type": "string",
      "example": "Prestashop"
    },
    "firstName": {
      "type": "string",
      "description": "The first name of a person",
      "example": "Marilyne"
    },
    "lastName": {
      "type": "string",
      "description": "The last name of a person",
      "example": "Monroe"
    },
    "correlationId": {
      "x-exclude": true,
      "description": "The correlation identifier. It's a guid.",
      "format": "CorrelationId",
      "type": "string",
      "example": "b0d3faea-f881-439f-ba92-02b1168511ea"
    },
    "messageId": {
      "x-exclude": true,
      "description": "The message identifier. It's a guid.",
      "format": "MessageId",
      "type": "string",
      "example": "b0d3faea-f881-439f-ba92-02b1168511ea"
    },
    "causeId": {
      "x-exclude": true,
      "description": "The cause identifier. It's a guid.",
      "format": "CauseId",
      "type": "string",
      "example": "b0d3faea-f881-439f-ba92-02b1168511ea"
    },
    "merchantCode": {
      "type": "string",
      "description": "The merchant code identifier in IMN",
      "pattern": "^([A-Z|0-9]){5}$",
      "x-pattern": "^([A-Z|0-9]){5}$",
      "example": "MLT01"
    },
    "marketplaceCode": {
      "type": "string",
      "description": "The marketplace code identifier in IMN.\nFor now we have:\n- C1 for Cdiscount\n- E1 for ePrice\n- R1 for Real.DE\n- B1 for BOL\n- E2 for eMAG\n",
      "pattern": "^([A-Z]|[0-9]){2}$",
      "x-pattern": "^([A-Z]|[0-9]){2}$",
      "example": "C1"
    },
    "marketplaceMerchantCode": {
      "type": "string",
      "description": "The merchant code for a marketplace",
      "example": "005145"
    },
    "paginationRequestParameters": {
      "type": "object",
      "properties": {
        "pageSize": {
          "$ref": "#/definitions/pageSize"
        },
        "pageNumber": {
          "$ref": "#/definitions/pageNumber"
        }
      }
    },
    "pageSize": {
      "x-exclude": true,
      "description": "Indicate the item count per page",
      "type": "integer",
      "format": "int32",
      "default": 100,
      "minimum": 25,
      "x-minimum": 25,
      "maximum": 100,
      "x-maximum": 100,
      "example": 100
    },
    "pageNumber": {
      "x-exclude": true,
      "description": "Indicates the page number",
      "format": "int32",
      "type": "integer",
      "example": 1,
      "minimum": 1,
      "x-minimum": 1,
      "default": 1
    },
    "productFilterOperatorName": {
      "type": "string",
      "description": "Indicate the operator you want to make on the columnId",
      "enum": [
        "Equals",
        "Contains",
        "GreaterTo",
        "LowerTo",
        "InList",
        "IsNull",
        "IsNotNull"
      ]
    },
    "sku": {
      "type": "string",
      "description": "The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers. http://schema.org/sku",
      "maxLength": 50
    },
    "gtin": {
      "type": "string",
      "description": "Global Trade Item Number (GTIN) of the item.\nSupported values:\n\n- UPC (in North America / GTIN-12)\n12-digit number like 323456789012\n8-digit UPC-E codes should be converted to 12-digit codes\n- EAN (in Europe / GTIN-13)\n13-digit number like 3001234567892\n- JAN (in Japan / GTIN-13)\n8 or 13-digit number like 49123456 or 4901234567894\n- ISBN (for books)\n10 or 13-digit number like 1455582344 or 978-1455582341. If you have both, only include the 13-digit number. ISBN-10 are deprecated and should be converted to ISBN-13\n- ITF-14 (for multipacks / GTIN-14)\n14-digit number like 10856435001702\n\nSchema.org property:\n- [Offer.gtin8](http://schema.org/gtin8)\n- [Offer.gtin12](http://schema.org/gtin12)\n- [Offer.gtin13](http://schema.org/gtin13)\n- [Offer.gtin14](http://schema.org/gtin14)\n- [Offer.isbn](http://schema.org/isbn)\n",
      "maxLength": 50
    },
    "productBasicInfo": {
      "description": "The basic information related to a product",
      "type": "object",
      "required": [
        "productId",
        "productSku",
        "productTitle",
        "productImageUrl",
        "productExists"
      ],
      "properties": {
        "productId": {
          "format": "guid",
          "type": "string",
          "description": "The product identifier",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "productSku": {
          "type": "string",
          "description": "The product SKU",
          "example": "SKU1234"
        },
        "productTitle": {
          "type": "string",
          "description": "The product tile",
          "example": "My supert product"
        },
        "productImageUrl": {
          "type": "string",
          "format": "HttpUrl",
          "description": "The product image Url",
          "example": "http://i2.cdscdn.com/pdt2/3/9/0/1/550x550/hai6901018043390/rw/haier-b20fwrss-refrigerateur-americain.jpg"
        },
        "productExists": {
          "type": "boolean",
          "description": "Indicates if the product still exists in your catalog",
          "example": true
        }
      }
    },
    "countryIsoCodeAlpha3": {
      "description": "The country iso code alpha 3 <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3\">(ISO 3166-1_alpha-3)</a>",
      "type": "string",
      "pattern": "^[A-Z]{3}$",
      "x-pattern": "^[A-Z]{3}$",
      "x-lov": "Country",
      "example": "FRA"
    },
    "currencyCode": {
      "x-exclude": true,
      "description": "The currency code <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">(ISO 4217)</a>\n",
      "type": "string",
      "pattern": "^[A-Z]{3}$",
      "x-pattern": "^[A-Z]{3}$",
      "example": "EUR"
    },
    "email": {
      "x-exclude": true,
      "description": "The email",
      "type": "string",
      "format": "email",
      "pattern": "^(.+)@(.+)$",
      "x-pattern": "^(.+)@(.+)$",
      "example": "paulsimon@mysupercompany.com"
    },
    "userId": {
      "x-exclude": true,
      "format": "guid",
      "description": "The user identifier",
      "type": "string",
      "example": "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    },
    "productId": {
      "type": "string",
      "format": "guid",
      "description": "The product identifier",
      "example": "578419df-1bbf-41a6-96fa-862e42182b67"
    },
    "listOfValueItem": {
      "description": "This object is used by LOV apis",
      "type": "object",
      "required": [
        "codeIdentifier",
        "intIdentifier"
      ],
      "properties": {
        "position": {
          "format": "int32",
          "type": "integer",
          "example": 1
        },
        "codeIdentifier": {
          "type": "string",
          "example": "FRA"
        },
        "translationText": {
          "type": "string",
          "example": "France"
        },
        "intIdentifier": {
          "format": "int32",
          "type": "integer",
          "example": 1
        }
      }
    },
    "paginationResult": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "entryCount",
        "pageCount",
        "totalEntryCount",
        "links"
      ],
      "properties": {
        "entryCount": {
          "type": "integer",
          "description": "The entry count currently returned",
          "example": 25,
          "minimum": 0
        },
        "pageCount": {
          "type": "integer",
          "description": "The page count",
          "example": 38,
          "minimum": 0
        },
        "totalEntryCount": {
          "type": "integer",
          "description": "The total entry count",
          "example": 943,
          "minimum": 0
        },
        "links": {
          "$ref": "#/definitions/paginationResultLinks"
        }
      },
      "example": {
        "entryCount": 25,
        "pageCount": 38,
        "totalEntryCount": 943,
        "links": {
          "first": {
            "href": "/merchant/orders/v1/list/full",
            "method": "POST",
            "parameters": [
              {
                "name": "request",
                "in": "body",
                "type": "object",
                "schema": "orderListRequest",
                "value": {
                  "beginPeriodUtcDate": "2014-08-25T07:32:31.584Z",
                  "endPeriodUtcDate": "2014-09-24T07:32:31.584Z",
                  "pageSize": 25,
                  "pageNumber": 1
                }
              }
            ]
          },
          "last": {
            "href": "/merchant/orders/v1/list/full",
            "method": "POST",
            "parameters": [
              {
                "name": "request",
                "in": "body",
                "type": "object",
                "schema": "orderListRequest",
                "value": {
                  "beginPeriodUtcDate": "2014-08-25T07:32:31.584Z",
                  "endPeriodUtcDate": "2014-09-24T07:32:31.584Z",
                  "pageSize": 25,
                  "pageNumber": 38
                }
              }
            ]
          },
          "next": {
            "href": "/merchant/orders/v1/list/full",
            "method": "POST",
            "parameters": [
              {
                "name": "request",
                "in": "body",
                "type": "object",
                "schema": "orderListRequest",
                "value": {
                  "beginPeriodUtcDate": "2014-08-25T07:32:31.584Z",
                  "endPeriodUtcDate": "2014-09-24T07:32:31.584Z",
                  "pageSize": 25,
                  "pageNumber": 2
                }
              }
            ]
          }
        }
      }
    },
    "paginationResultLinks": {
      "x-exclude": true,
      "description": "The navigation links 'first', 'last', 'next', 'previous'",
      "type": "object",
      "required": [
        "first",
        "last"
      ],
      "properties": {
        "first": {
          "$ref": "#/definitions/link3"
        },
        "last": {
          "$ref": "#/definitions/link3"
        },
        "previous": {
          "$ref": "#/definitions/link3"
        },
        "next": {
          "$ref": "#/definitions/link3"
        }
      }
    },
    "href": {
      "x-exclude": true,
      "type": "string",
      "example": "/merchant/orders/v1/{marketplaceCode}/{IMNOrderId}",
      "description": "Indicate the relative uri for this link"
    },
    "operationId": {
      "x-exclude": true,
      "type": "string",
      "description": "The operationId to call.",
      "example": "GetOrder"
    },
    "httpMethod": {
      "x-exclude": true,
      "type": "string",
      "enum": [
        "GET",
        "POST",
        "PATCH",
        "DELETE",
        "PUT",
        "HEAD"
      ],
      "default": "GET",
      "example": "GET",
      "description": "Indicate the http method to use on this link"
    },
    "link3": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "href"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "The label corresponding to the link. This label is automatically translated based on the Accept-Language http header.",
          "example": "The translated label"
        },
        "docUrl": {
          "$ref": "#/definitions/docUrl"
        },
        "description": {
          "type": "string",
          "description": "The description of the link",
          "example": "This is a description link"
        },
        "href": {
          "$ref": "#/definitions/href"
        },
        "operationId": {
          "$ref": "#/definitions/operationId"
        },
        "method": {
          "$ref": "#/definitions/httpMethod"
        },
        "parameters": {
          "$ref": "#/definitions/linkParameter3Types"
        },
        "urlTemplated": {
          "type": "boolean",
          "description": "indicates whether the href is templated or not"
        },
        "allRequiredParamsProvided": {
          "type": "boolean",
          "description": "indicates whether all required params have been provided"
        },
        "allOptionalParamsProvided": {
          "type": "boolean",
          "description": "indicates whether all optionals params have been provided"
        },
        "info": {
          "$ref": "#/definitions/infoSummaries"
        }
      }
    },
    "linkParameter3Types": {
      "x-exclude": true,
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/linkParameter3"
      }
    },
    "linkParameter2Types": {
      "x-exclude": true,
      "type": "array",
      "uniqueItems": true,
      "minItems": 0,
      "items": {
        "$ref": "#/definitions/linkParameter2"
      }
    },
    "link2": {
      "x-exclude": true,
      "type": "object",
      "x-deprecated": true,
      "required": [
        "rel"
      ],
      "properties": {
        "rel": {
          "type": "string",
          "description": "Indicate the relation name related to the link",
          "example": "self"
        },
        "href": {
          "$ref": "#/definitions/href"
        },
        "operationId": {
          "$ref": "#/definitions/operationId"
        },
        "method": {
          "$ref": "#/definitions/httpMethod"
        },
        "parameters": {
          "$ref": "#/definitions/linkParameter2Types"
        },
        "info": {
          "$ref": "#/definitions/infoSummaries"
        }
      }
    },
    "parameterIn": {
      "x-exclude": true,
      "type": "string",
      "description": "* path: if the parameter must be pass in the path uri\n* header: if the parameter must be passed in http header\n* query: if the parameter must be passed in querystring\n* body: if the parameter must be passed in the body\n* file: if the parameter must be passed in a multipart/form-data (https://swagger.io/docs/specification/2-0/file-upload/)\n",
      "example": "path",
      "enum": [
        "path",
        "header",
        "query",
        "body",
        "file"
      ]
    },
    "parameterType": {
      "x-exclude": true,
      "description": "The value type of the parameter",
      "type": "string",
      "enum": [
        "string",
        "integer",
        "number",
        "boolean",
        "object",
        "array",
        "date",
        "date-time",
        "file"
      ],
      "default": "string",
      "example": "string"
    },
    "linkParameter3": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "in"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "The label corresponding to the link parameter. This label is automatically translated based on the Accept-Language http header.",
          "example": "The translated label"
        },
        "value": {
          "type": "object",
          "description": "The value of the parameter. It can be an integer a string or an object.",
          "example": "1234"
        },
        "required": {
          "type": "boolean",
          "default": false,
          "example": true
        },
        "in": {
          "$ref": "#/definitions/parameterIn"
        },
        "lovLink": {
          "$ref": "#/definitions/LOVLink3"
        },
        "lovRequired": {
          "type": "boolean",
          "description": "If true, you MUST indicate a value from the list of values otherwise it's a freetext",
          "example": true
        },
        "description": {
          "type": "string",
          "description": "description of the parameter",
          "example": "the store identifier"
        },
        "schema": {
          "type": "string",
          "description": "schema of the parameter",
          "example": "orderListRequest"
        },
        "pattern": {
          "$ref": "#/definitions/validationPattern"
        },
        "properties": {
          "description": "If the parameter is an object with flexible properties (additionProperties/dictionary), we will describe the properties of the object.",
          "additionalProperties": {
            "$ref": "#/definitions/linkParameterProperty3"
          },
          "example": {
            "shipOrder": {
              "type": "â€‹string"
            }
          }
        }
      }
    },
    "validationPattern": {
      "type": "string",
      "description": "The regular expression to validate the value",
      "example": "*.-api$"
    },
    "linkParameterProperty3": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "The label corresponding to the link parameter property. This label is automatically translated based on the Accept-Language http header.",
          "example": "The translated label"
        },
        "value": {
          "type": "object",
          "description": "The value of the parameter. It can be an integer a string or an object.",
          "example": "1234"
        },
        "required": {
          "type": "boolean",
          "example": true
        },
        "type": {
          "$ref": "#/definitions/parameterType"
        },
        "lovLink": {
          "$ref": "#/definitions/LOVLink3"
        },
        "lovRequired": {
          "type": "boolean",
          "description": "If true, you MUST use indicate a value from the list of values otherwise it's a freetext",
          "example": true
        },
        "description": {
          "type": "string",
          "description": "description of the parameter",
          "example": "the store identifier"
        },
        "schema": {
          "type": "string",
          "description": "schema of the parameter",
          "example": "orderListRequest"
        },
        "pattern": {
          "$ref": "#/definitions/validationPattern"
        }
      }
    },
    "linkParameter2": {
      "x-exclude": true,
      "type": "object",
      "x-deprecated": true,
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the parameter",
          "example": "marketplaceCode"
        },
        "value": {
          "type": "string",
          "description": "The value of the parameter",
          "example": "1234"
        },
        "required": {
          "type": "boolean",
          "example": true
        },
        "in": {
          "$ref": "#/definitions/parameterIn"
        },
        "type": {
          "$ref": "#/definitions/parameterType"
        },
        "lovLink": {
          "description": "This parameter expect the values indicated in this list of values.",
          "$ref": "#/definitions/LOVLink2"
        },
        "lovRequired": {
          "type": "boolean",
          "description": "If true, you MUST use indicate a value from the list of values otherwise it's a freetext",
          "example": true
        }
      }
    },
    "LOVLink2": {
      "description": "Describe the way you have to follow to get access to the LOV",
      "x-deprecated": true,
      "type": "object",
      "required": [
        "listName"
      ],
      "properties": {
        "rel": {
          "type": "string",
          "description": "Indicate the relation name related to the link",
          "example": "LOV_Go2CultureName"
        },
        "href": {
          "type": "string",
          "example": "/merchant/lov/v1/{listName}",
          "description": "Indicate the relative uri pattern to the list of value"
        },
        "listName": {
          "type": "string",
          "description": "The name of the list of value",
          "example": "Go2CultureName"
        }
      }
    },
    "LOVLink3": {
      "x-exclude": true,
      "description": "Describe the way you have to follow to get access to the LOV",
      "type": "object",
      "required": [
        "href"
      ],
      "properties": {
        "href": {
          "type": "string",
          "format": "uri",
          "example": "/merchant/lov/v1/Go2CultureName",
          "description": "Indicate the uri to the list of value"
        },
        "method": {
          "$ref": "#/definitions/httpMethod"
        }
      }
    },
    "errorResponseMessage": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "errors"
      ],
      "properties": {
        "errors": {
          "type": "array",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/userErrorMessage"
          }
        }
      }
    },
    "docUrl": {
      "x-exclude": true,
      "type": "string",
      "format": "uri",
      "description": "The documentation related to this operation.",
      "example": "https://api-docs.imn.io/#operation/EnableChannelCatalog"
    },
    "errorCode": {
      "x-exclude": true,
      "type": "string",
      "description": "the error code. The error code can be a pattern containing the argument's name",
      "example": "CatalogImportationAlreadyInProgress(ExecutionId currentCatalogImportationId)"
    },
    "cultureName": {
      "x-exclude": true,
      "type": "string",
      "description": "If the error is translated, the culture name will be indicated",
      "example": "en",
      "x-lov": "Go2CultureName"
    },
    "userErrorMessage": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "docUrl": {
          "$ref": "#/definitions/docUrl"
        },
        "code": {
          "$ref": "#/definitions/errorCode"
        },
        "message": {
          "type": "string",
          "description": "The error message",
          "example": "There is already an importation in progress: b24d0dd8-a561-478a-9b26-34f573f03527\n"
        },
        "cultureName": {
          "$ref": "#/definitions/cultureName"
        },
        "arguments": {
          "$ref": "#/definitions/userErrorMessageArguments"
        }
      }
    },
    "userErrorMessageArguments": {
      "x-exclude": true,
      "type": "object",
      "description": "a dictionary string/object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "exceptionDetail": {
      "type": "object",
      "properties": {
        "helpLink": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "stackTrace": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "infoSummaries": {
      "type": "object",
      "properties": {
        "successes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/successSummary"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/errorSummary"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/warningSummary"
          }
        },
        "informations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/infoSummary"
          }
        }
      }
    },
    "successSummary": {
      "type": "object",
      "properties": {
        "successCode": {
          "type": "string"
        },
        "successMessage": {
          "type": "string"
        },
        "successArguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "propertyName": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        },
        "objectName": {
          "type": "string"
        }
      }
    },
    "errorSummary": {
      "type": "object",
      "properties": {
        "utcDate": {
          "format": "date-time",
          "type": "string"
        },
        "errorGuid": {
          "format": "uuid",
          "type": "string"
        },
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "technicalErrorMessage": {
          "type": "string"
        },
        "exceptionDetail": {
          "$ref": "#/definitions/exceptionDetail"
        },
        "errorArguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "propertyName": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        },
        "objectName": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      }
    },
    "warningSummary": {
      "type": "object",
      "properties": {
        "technicalErrorMessage": {
          "type": "string"
        },
        "warningMessage": {
          "type": "string"
        },
        "warningCode": {
          "type": "string"
        },
        "warningArguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "infoSummary": {
      "type": "object",
      "properties": {
        "informationCode": {
          "type": "string"
        },
        "informationMessage": {
          "type": "string"
        },
        "informationArguments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "propertyName": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        },
        "objectName": {
          "type": "string"
        }
      }
    },
    "marketplaceApiCredential": {
      "description": "The API credentials of the merchant on his marketplace.",
      "type": "object",
      "additionalProperties": {
        "type": "string",
        "example": {
          "login": "mylogin",
          "password": "myPassword"
        }
      }
    },
    "merchantMarketplaceBase": {
      "type": "object",
      "required": [
        "merchantCode",
        "marketplaceCode"
      ],
      "properties": {
        "merchantCode": {
          "$ref": "#/definitions/merchantCode"
        },
        "marketplaceCode": {
          "$ref": "#/definitions/marketplaceCode"
        }
      }
    },
    "sort": {
      "x-excludeSql": true,
      "type": "string",
      "default": "ascending",
      "enum": [
        "ascending",
        "descending"
      ]
    },
    "operationSourceType": {
      "description": "Indicates the origin of the operation:\n* api: the operation has been done using our api directly.\n* ui: the operation has been done using our user interface. \n",
      "type": "string",
      "enum": [
        "api",
        "ui"
      ],
      "example": "api"
    },
    "processingStatus": {
      "x-exclude": true,
      "description": "The processing status of an operation",
      "type": "string",
      "enum": [
        "none",
        "inProgress",
        "done",
        "failed",
        "aborted"
      ]
    },
    "healthCheck": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Health check name",
          "example": "MyDatabaseCheck"
        },
        "message": {
          "type": "string",
          "description": "Gets the status message of the check.",
          "example": "Database connection OK"
        },
        "status": {
          "$ref": "#/definitions/healthCheckStatus"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "healthCheckStatus": {
      "type": "string",
      "description": "Possible status values of a health check result.\n* degraded:  The check is degraded, failing but not critical\n* healthy: The check is healthy\n* ignored: The check was ignored\n* unhealthy:  The check is unhealthy\n",
      "enum": [
        "degraded",
        "healthy",
        "ignored",
        "unhealthy"
      ]
    },
    "messageBase": {
      "x-exclude": true,
      "type": "object",
      "required": [
        "messageId",
        "correlationId"
      ],
      "properties": {
        "messageId": {
          "allOf": [
            {
              "x-excludeProperty": true
            },
            {
              "$ref": "#/definitions/messageId"
            }
          ]
        },
        "correlationId": {
          "$ref": "#/definitions/correlationId"
        },
        "causeId": {
          "$ref": "#/definitions/causeId"
        }
      }
    },
    "eventType": {
      "x-exclude": true,
      "description": "The event type",
      "type": "string"
    },
    "eventBase": {
      "x-exclude": true,
      "allOf": [
        {
          "$ref": "#/definitions/messageBase"
        },
        {
          "type": "object",
          "discriminator": "eventType",
          "required": [
            "eventType"
          ],
          "properties": {
            "eventType": {
              "$ref": "#/definitions/eventType"
            }
          }
        }
      ]
    }
  },
  "externalDocs": {
    "description": "Find the documentation for IMN's API here",
    "url": "https://api-docs.imn.io/"
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "in": "header",
      "name": "Ocp-Apim-Subscription-Key"
    }
  },
  "x-tagGroups": [
    {
      "name": "Merchant API - Operations",
      "tags": [
        "Merchant API - Operations - Global"
      ]
    },
    {
      "name": "Merchant API - Marketplaces",
      "tags": [
        "Merchant API - Marketplaces - Global",
        "Merchant API - Marketplaces - Marketplace",
        "Merchant API - Marketplaces - Api Credentials",
        "Merchant API - Marketplaces - Source Marketplace Activation",
        "Merchant API - Marketplaces - Shipping Settings",
        "Merchant API - Marketplaces - Pricing Settings",
        "Merchant API - Marketplaces - Target Marketplace Activation"
      ]
    },
    {
      "name": "Merchant - Account API",
      "tags": [
        "Merchant - Account API - Global",
        "Merchant - Account API - Account",
        "Merchant - Account API - Api Token"
      ]
    },
    {
      "name": "Merchant - Orders",
      "tags": [
        "Merchant - Orders - Global",
        "Merchant - Orders - List",
        "Merchant - Orders - Order",
        "Merchant - Orders - Batches",
        "Merchant - Orders - Subscriptions - DRAFT",
        "Merchant - Orders - Statistics"
      ]
    },
    {
      "name": "Merchant API - Offers",
      "tags": [
        "Merchant API - Offers - Global"
      ]
    },
    {
      "name": "Merchant API - List of Values",
      "tags": [
        "Merchant API - List of Values - LOV"
      ]
    },
    {
      "name": "External API - Merchant Marketplace Subscription Request",
      "tags": [
        "External API - Merchant Marketplace Subscription Request - Global"
      ]
    }
  ],
  "responses": {
    "orderMerchantInfoBatchOperationResponse": {
      "description": "Succesfully or partially processed operations.\nIn the response, you will see the status per operation.\n",
      "schema": {
        "$ref": "#/definitions/batchOrderOperationResponse"
      },
      "headers": {
        "Location": {
          "type": "string",
          "description": "The location to monitor the progression of the operation in the IMN system"
        }
      }
    },
    "orderChangeBatchOperationResponse": {
      "description": "Succesfully or partially processed operations.\nIn the response, you will see the status per operation.\n\nFor each operation succeed:\n- the operation will be fowarded to the marketplace\n- that does not mean that marketplace will validate your operation.\n",
      "schema": {
        "$ref": "#/definitions/batchOrderOperationResponse"
      },
      "headers": {
        "Location": {
          "type": "string",
          "description": "The location to monitor the progression of the operation in the IMN system"
        }
      }
    },
    "orderBatchBadRequest": {
      "description": "In case there is an error like:\n- ValidationException\n- DuplicateOrderOperationException\n- InvalidMerchantCodeException\n- OrderManagementDisabledException\n",
      "x-exceptions": [
        "ValidationException",
        "DuplicateOrderOperationException",
        "InvalidMerchantCodeException",
        "OrderManagementDisabledException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "orderNotFound": {
      "description": "The requested order is not found.\n",
      "x-exceptions": [
        "OrderNotFoundException",
        "OrderManagementDisabledException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "orderChangeNotFound": {
      "description": "The requested order or correlation identifier is not found.",
      "x-exceptions": [
        "OrderNotFoundException",
        "OrderChangeNotFoundException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "orderChangeAlreadyInProgress": {
      "x-exceptions": [
        "OrderChangeAlreadyInProgressException"
      ],
      "description": "Already processing a change request for this Order.\\\nPlease refresh your clients Order information and retry later.\n",
      "headers": {
        "Retry-After": {
          "type": "integer",
          "description": "Indicates the duration in seconds to wait to be able to make this request again"
        }
      },
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "offerBatchBadRequest": {
      "description": "In case there is an error like:\n- ValidationException\n- DuplicateMerchantOfferOperationException\n- DuplicateMerchantMarketplaceOfferOperationException\n- InvalidMarketplaceCodeException\n- InvalidMerchantCodeException\n",
      "x-exceptions": [
        "ValidationException",
        "DuplicateMerchantOfferOperationException",
        "DuplicateMerchantMarketplaceOfferOperationException",
        "InvalidMarketplaceCodeException",
        "InvalidMerchantCodeException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "GeneralError": {
      "description": "Occurs when something goes wrong",
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "304_NotModified": {
      "description": "The ETag sent in the http header If-None-Match did not change. So you are up to date !",
      "headers": {
        "Last-Modified": {
          "type": "string",
          "format": "date-time",
          "description": "Last modification UTC date of the resource\\\nFor more details go to this link: https://tools.ietf.org/html/rfc7232#section-2.2\n"
        },
        "ETag": {
          "type": "string",
          "description": "ETag value to identify the current version of the resource\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
        }
      }
    },
    "412_PreConditionFailed": {
      "description": "The ETag sent in the http header If-Match did not match with the current version. Please refresh the information related to this resource.",
      "headers": {
        "ETag": {
          "type": "string",
          "description": "The ETag value to identify the resource.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
        }
      }
    },
    "merchantNotFound": {
      "description": "The merchant code is not found.",
      "x-exceptions": [
        "MerchantCodeNotFoundException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "marketplaceNotFound": {
      "description": "The marketplace code is not found.",
      "x-exceptions": [
        "MarketplaceCodeNotFoundException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "invalidMarketplaceCredential": {
      "description": "The marketplace credential is invalid",
      "x-exceptions": [
        "InvalidMarketplaceCredentialException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "merchantOrMarketplaceNotFound": {
      "description": "The merchant code or marketplace code is not found.",
      "x-exceptions": [
        "MarketplaceCodeNotFoundException",
        "MerchantCodeNotFoundException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "merchantCodeAlreadyUsed": {
      "description": "The merchant code is not available",
      "x-exceptions": [
        "MerchantCodeAlreadyUsedException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "invalidMerchantCode": {
      "description": "The merchant code is different from the state",
      "x-exceptions": [
        "InvalidMerchantCodeException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "notOfferSourceMarketplace": {
      "description": "The marketplace is not the offer source",
      "x-exceptions": [
        "NotOfferSourceMarketplaceException"
      ],
      "schema": {
        "$ref": "#/definitions/errorResponseMessage"
      }
    },
    "subscriptionNotAccepted": {
      "description": "The subscription is not accepted by the marketplace",
      "x-exceptions": [
        "SubscriptionNotAcceptedException"
      ],
      "schema": {
        "$ref": "#/definitions/userErrorMessage"
      }
    },
    "credentialNotConfigured": {
      "description": "The credential is not configured for the marketplace",
      "x-exceptions": [
        "CredentialNotConfiguredException"
      ],
      "schema": {
        "$ref": "#/definitions/userErrorMessage"
      }
    }
  },
  "parameters": {
    "marketplaceOrderIdParameter": {
      "description": "The MKP Order identifier",
      "name": "marketplaceOrderId",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "marketplaceOrderId",
      "x-example": "CDISCOUNT12345"
    },
    "userNameInQueryParameter": {
      "name": "userName",
      "description": "Optional. Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application's user login.",
      "in": "query",
      "required": false,
      "type": "string"
    },
    "testModeInQueryParameter": {
      "name": "testMode",
      "description": "If true, the operation will be not be sent to marketplace. But the validation will be taken in account.",
      "in": "query",
      "required": false,
      "type": "boolean",
      "default": false,
      "x-example": false
    },
    "correlationIdParameter": {
      "name": "correlationId",
      "in": "path",
      "type": "string",
      "format": "CorrelationId",
      "required": true,
      "description": "It's the guid corresponding to the operation.\n"
    },
    "pageNumberQueryStringParameter": {
      "name": "pageNumber",
      "description": "The page number you want to get",
      "in": "query",
      "required": true,
      "type": "integer",
      "format": "int32",
      "minimum": 1,
      "x-minimum": 1,
      "x-example": 1
    },
    "pageSizeQueryStringParameter": {
      "name": "pageSize",
      "description": "The entry count you want to get",
      "in": "query",
      "required": true,
      "type": "integer",
      "format": "int32",
      "minimum": 25,
      "x-minimum": 25,
      "maximum": 100,
      "x-maximum": 100,
      "x-example": 25
    },
    "ifNoneMatchParameter": {
      "name": "If-None-Match",
      "type": "string",
      "in": "header",
      "required": false,
      "description": "ETag value to identify the last known version of requested resource.\\\nTo avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\\nIf the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
    },
    "ifMatchParameter": {
      "name": "If-Match",
      "in": "header",
      "type": "string",
      "required": true,
      "description": "ETag value to identify the last known version of requested resource.\\\nTo ensure that you are making a change on the lastest version of the resource.\\\nFor more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3\n"
    },
    "acceptLanguageParameter": {
      "name": "Accept-Language",
      "description": "Indicates that the client accepts the following languages.",
      "in": "header",
      "required": false,
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "string"
      }
    },
    "acceptEncodingRequiredParameter": {
      "name": "Accept-Encoding",
      "description": "Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.",
      "in": "header",
      "required": true,
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "string"
      }
    },
    "acceptEncodingOptionalParameter": {
      "name": "Accept-Encoding",
      "description": "Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.",
      "in": "header",
      "required": false,
      "type": "array",
      "collectionFormat": "csv",
      "items": {
        "type": "string"
      }
    },
    "walletPropertyCodeParameter": {
      "name": "walletPropertyCode",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The wallet document code"
    },
    "marketplaceCodeParameter": {
      "format": "MarketplaceCode",
      "name": "marketplaceCode",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The marketplace code"
    },
    "merchantCodeParameter": {
      "format": "MerchantCode",
      "name": "merchantCode",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The merchant code"
    }
  }
}